Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Issue #41 Predetermined Join Columns
    * This module contains unit tests validating the functionality of PJC Type LOOKUP
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Define Field(#LF_Tmp_Records_Count) Reffld(#Std_Count)
    Define Field(#LF_Records_Count) Reffld(#Std_Count)
    Define Field(#LF_DB_Count) Reffld(#Std_Count)
    Define Field(#LF_DataShown) Reffld(#BIFB001B)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    Define Field(#LF_Records_Count_Employee_Table) Reffld(#Std_Count)
    Define Field(#LF_Records_Count_Department_Table) Reffld(#Std_Count)
    Def_List Name(#w_lEmployeeTable) Fields(#EmpID) Counter(#LF_Records_Count_Employee_Table) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#w_lDepartmentTable) Fields(#DeptCode) Counter(#LF_Records_Count_Department_Table) Type(*WORKING) Entrys(*MAX)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Unit tests to be implemented') '' )
    #Com_Owner.mthTestsForLookup( #LF_rc )
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    *
    * This routine is responsible to validate the tests for Mixed Mode Commitment control for tables VTLI0039C and VTLI0039D
    *
    Mthroutine Name(mthTestsForLookup)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Tests for PJC type LOOKUP') '' )
    
    #Com_Owner.mthClear_Department_And_Employee_Tables( #this_rc )
    
    
    #DeptCode := 'LNZ1'
    #DeptDescription := 'Development Team'
    #Com_Owner.mthAdd_Record_To_Department_Table_Is_Successful( #this_rc )
    * #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    
    #EmpID := '001'
    #SALARY := 2500
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    * #Com_Owner.mthFetch_Record_From_Employee_Table_Is_Successful( #this_rc )
    
    #Com_Owner.mthCheck_Department_Description_PJC_Lookup_For_Employee_Table_Is_Correctly_Computed( #this_rc )
    Endroutine
    
    *
    * This routine is responsible to clear the data from Employee and Department tables. i.e., VTLI0041A and VTLI0041B
    *
    Mthroutine Name(mthClear_Department_And_Employee_Tables)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK '- Clear data from tables' '' )
    
    #Com_Owner.mthClearDataFromEmployeeTable( #this_rc )
    #Com_Owner.mthClearDataFromDepartmentTable( #this_rc )
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Failed') '' )
    Endif
    Endroutine
    
    Mthroutine Name(mthClearDataFromEmployeeTable)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #Com_Owner.mthAdd_SubMsg( OK '-  Clear data from Employee table VTLI0041A' '' )
    
    Clr_List Named(#w_lEmployeeTable)
    Select Fields(#EmpID) From_File(VTLI0041A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lEmployeeTable)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('-  ' + #LF_Records_Count_Employee_Table.AsString + ' record(s) found') '' )
    
    If (#LF_Records_Count_Employee_Table > 0)
    Define Field(#LF_i) Reffld(#Std_Count)
    Begin_Loop Using(#LF_i) To(#LF_Records_Count_Employee_Table)
    Get_Entry Number(#LF_i) From_List(#w_lEmployeeTable)
    
    Delete From_File(VTLI0041A) With_Key(#EmpID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('Deleting on record ' + #EmpID) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Ok') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lEmployeeTable)
    Endroutine
    
    Mthroutine Name(mthClearDataFromDepartmentTable)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #Com_Owner.mthAdd_SubMsg( OK '-  Clear data from Department table VTLI0041A' '' )
    
    Clr_List Named(#w_lDepartmentTable)
    Select Fields(#DeptCode) From_File(VTLI0041B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDepartmentTable)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('-  ' + #LF_Records_Count_Department_Table.AsString + ' record(s) found') '' )
    
    If (#LF_Records_Count_Department_Table > 0)
    Define Field(#LF_j) Reffld(#Std_Count)
    Begin_Loop Using(#LF_i) To(#LF_Records_Count_Department_Table)
    Get_Entry Number(#LF_j) From_List(#w_lDepartmentTable)
    
    Delete From_File(VTLI0041B) With_Key(#DeptCode) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('Deleting on record ' + #DeptCode) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Ok') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lDepartmentTable)
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Department_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Adding a Record to Department Table VTLI0041B') ('') )
    If (#Com_Owner.mthAdd_Record_To_Department_Table( #this_rc ))
    #Com_Owner.mthAdd_SubMsg( OK ('-  Record does not exist') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record exists') ('') )
    Endif
    Endroutine
    
    *
    * This routine returns boolean value true if for the given key, the process is able to fetch record from the table VTLI0041B
    *
    Mthroutine Name(mthFetch_Record_From_Department_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Verifying data from Department table VTLI0041B. It must have the record with Key as #DeptCode "' + #DeptCode + '"') ('') )
    If (#Com_Owner.mthFetch_Record_From_Department_Table( #this_rc ))
    #Com_Owner.mthAdd_SubMsg( OK ('-  Record exists') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record does not exist') ('') )
    Endif
    Endroutine
    
    *
    * This routine returns boolean value true if for the given key, the process is able to fetch record from the table VTLI0041B
    *
    Mthroutine Name(mthFetch_Record_From_Department_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetching record from Department table VTLI0041B with Key as #DeptCode "' + #DeptCode + '"') ('') )
    #this_is_ok := false
    Fetch Fields(*ALL) From_File(VTLI0041B) With_Key(#DeptCode) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetched record as #DeptCode "' + #DeptCode + '" #DeptDescription "' + #DeptDescription + '"') ('') )
    
    #this_is_ok := true
    Endif
    Endroutine
    
    *
    * This routine is responsible to add a record to table VTLI0041B
    *
    Mthroutine Name(mthAdd_Record_To_Department_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Inserting record as #DeptCode "' + #DeptCode + '" #DeptDescription "' + #DeptDescription + '" into Department table VTLI0041B') ('') )
    
    #this_is_ok := true
    Insert Fields(*ALL) To_File(VTLI0041B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #this_is_ok := false
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Employee_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Adding a Record to Employee Table VTLI0041A') ('') )
    If (#Com_Owner.mthAdd_Record_To_Employee_Table( #this_rc ))
    #Com_Owner.mthAdd_SubMsg( OK ('-  Record does not exist') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record exists') ('') )
    Endif
    Endroutine
    
    *
    * This routine returns boolean value true if for the given key, the process is able to fetch record from the table VTLI0041A
    *
    Mthroutine Name(mthFetch_Record_From_Employee_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Verifying data from Employee table VTLI0041A. It must have the record with Key as #EmpID "' + #EmpID + '"') ('') )
    If (#Com_Owner.mthFetch_Record_From_Employee_Table( #this_rc ))
    #Com_Owner.mthAdd_SubMsg( OK ('-  Record exists') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record does not exist') ('') )
    Endif
    Endroutine
    
    *
    * This routine returns boolean value true if for the given key, the process is able to fetch record from the table VTLI0041A
    *
    Mthroutine Name(mthFetch_Record_From_Employee_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetching record from Employee table VTLI0041A with Key as #EmpID "' + #EmpID + '"') ('') )
    #this_is_ok := false
    Fetch Fields(*ALL) From_File(VTLI0041A) With_Key(#EmpID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetched record as #EmpID "' + #EmpID + '" #SALARY ' + #SALARY.AsString + ' #DeptCode "' + #DeptCode + '" #DeptDescription "' + #I0041DeptDescPJC + '"') ('') )
    #this_is_ok := true
    Endif
    Endroutine
    
    *
    * This routine is responsible to add a record to table VTLI0041A
    *
    Mthroutine Name(mthAdd_Record_To_Employee_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Inserting record as #EmpID "' + #EmpID + '" #SALARY ' + #SALARY.AsString + ' into Employee table VTLI0041A') ('') )
    
    #this_is_ok := true
    Insert Fields(*ALL) To_File(VTLI0041A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #this_is_ok := false
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthCheck_Department_Description_PJC_Lookup_For_Employee_Table_Is_Correctly_Computed)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Validating PJC Type, Lookup for Department Description of Employee table') ('') )
    #Com_Owner.mthAdd_SubMsg( OK ('-  Check for the #EmpID "' + #EmpID + '" #DeptCode ' + #DeptCode + '" Department Description is correctly generated') ('') )
    
    #Com_Owner.mthFetch_Record_From_Employee_Table_Is_Successful( #this_rc )
    #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    If (#I0041DeptDescPJC *EQ #DeptDescription)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Correct Department Description is mapped as "' + #I0041DeptDescPJC + '"') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Incorrect Department Description is mapped as "' + #I0041DeptDescPJC + '"') ('') )
    
    Endif
    Endroutine
