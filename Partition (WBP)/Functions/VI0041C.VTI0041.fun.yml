Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Issue #41 Predetermined Join Columns
    * This module contains unit tests validating the functionality of PJC Type LOOKUP
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Define Field(#LF_Tmp_Records_Count) Reffld(#Std_Count)
    Define Field(#LF_Records_Count) Reffld(#Std_Count)
    Define Field(#LF_DB_Count) Reffld(#Std_Count)
    Define Field(#LF_DataShown) Reffld(#BIFB001B)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    Define Field(#LF_Records_Count_Employee_Table) Reffld(#Std_Count)
    Define Field(#LF_Records_Count_Department_Table) Reffld(#Std_Count)
    Def_List Name(#w_lEmployeeTable) Fields(#EMPID #XDEPTMENT #SALARY #I0041DeptDescPJC) Counter(#LF_Records_Count_Employee_Table) Type(*WORKING) Entrys(*MAX)
    Def_List Name(#w_lDepartmentTable) Fields(#XDEPTMENT #DEPTDESC #I0041TotalSalaryPJC) Counter(#LF_Records_Count_Department_Table) Type(*WORKING) Entrys(*MAX)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    #Com_Owner.mth_Tests_For_Lookup_Department_Description( #LF_rc )
    
    #Com_Owner.mthTests_For_Total_Salaries_For_Each_Department( #LF_rc )
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    Mthroutine Name(mth_Tests_For_Lookup_Department_Description)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Tests for PJC type LOOKUP') '' )
    
    #Com_Owner.mthClear_Department_And_Employee_Tables( #this_rc )
    
    Begin_Loop Using(#LF_i) To(100)
    If ((#LF_i *GE 1) *And (#LF_i *LE 25))
    If (#LF_i *EQ 1)
    * create Development team
    #XDEPTMENT := 'LNZ1'
    #DEPTDESC := 'Dev Team'
    #Com_Owner.mthAdd_Record_To_Department_Table_Is_Successful( #this_rc )
    Endif
    
    * add an employee to it
    #EMPID := #LF_i
    #SALARY := 2500 + #LF_i
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    Endif
    
    If ((#LF_i *GE 26) *And (#LF_i *LE 50))
    If (#LF_i *EQ 26)
    * create QA team
    #XDEPTMENT := 'LNZ2'
    #DEPTDESC := 'QA Team'
    #Com_Owner.mthAdd_Record_To_Department_Table_Is_Successful( #this_rc )
    Endif
    
    * add an employee to it
    #EMPID := #LF_i
    #SALARY := 3000 + #LF_i
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    Endif
    
    If ((#LF_i *GE 51) *And (#LF_i *LE 75))
    If (#LF_i *EQ 51)
    * create Management team
    #XDEPTMENT := 'LNZ3'
    #DEPTDESC := 'Mgmt Team'
    #Com_Owner.mthAdd_Record_To_Department_Table_Is_Successful( #this_rc )
    Endif
    
    * add an employee to it
    #EMPID := #LF_i
    #SALARY := 3500 + #LF_i
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    Endif
    
    If ((#LF_i *GE 76) *And (#LF_i *LE 100))
    If (#LF_i *EQ 51)
    * create Finance team
    #XDEPTMENT := 'LNZ4'
    #DEPTDESC := 'Fin Team'
    #Com_Owner.mthAdd_Record_To_Department_Table_Is_Successful( #this_rc )
    Endif
    
    * add an employee to it
    #EMPID := #LF_i
    #SALARY := 4000 + #LF_i
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    Endif
    End_Loop
    
    #Com_Owner.mthCheck_For_Each_Employee_Department_Description_Is_Correctly_Mapped( #this_rc )
    
    * rename Development team as Support team
    #XDEPTMENT := 'LNZ1'
    #DEPTDESC := 'Support Team'
    #Com_Owner.mthUpdate_Department_Description_Is_Successful( #this_rc )
    
    
    * rename Development team as Support team
    #XDEPTMENT := 'LNZ2'
    #DEPTDESC := 'Test Team'
    #Com_Owner.mthUpdate_Department_Description_Is_Successful( #this_rc )
    
    #Com_Owner.mthCheck_For_Each_Employee_Department_Description_Is_Correctly_Mapped( #this_rc )
    Endroutine
    
    
    Mthroutine Name(mthTests_For_Total_Salaries_For_Each_Department)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( ER ('- Tests for PJC type TOTAL to be implemented') '' )
    
    * create Development team and add an employee to it
    #XDEPTMENT := 'LNZ1'
    #EMPID := 5
    #SALARY := 2400
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    
    #XDEPTMENT := 'LNZ1'
    #EMPID := 6
    #SALARY := 2400
    #Com_Owner.mthAdd_Record_To_Employee_Table_Is_Successful( #this_rc )
    
    #XDEPTMENT := 'LNZ1'
    #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    
    #XDEPTMENT := 'LNZ2'
    #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    
    
    #XDEPTMENT := 'LNZ3'
    #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    
    #XDEPTMENT := 'LNZ4'
    #Com_Owner.mthFetch_Record_From_Department_Table_Is_Successful( #this_rc )
    Endroutine
    
    *
    * This routine is responsible to clear the data from Employee and Department tables. i.e., VTLI0041A and VTLI0041B
    *
    Mthroutine Name(mthClear_Department_And_Employee_Tables)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK '- Clear data from tables' '' )
    
    #Com_Owner.mthClearDataFromEmployeeTable( #this_rc )
    #Com_Owner.mthClearDataFromDepartmentTable( #this_rc )
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Failed') '' )
    Endif
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Department_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Adding a Record to Department Table VTLI0041B') ('') )
    If (#Com_Owner.mthAdd_Record_To_Department_Table( #this_rc ) *EQ false)
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record exists') ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Employee_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Adding a Record to Employee Table VTLI0041A') ('') )
    If (#Com_Owner.mthAdd_Record_To_Employee_Table( #this_rc ) *EQ false)
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record exists') ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthCheck_For_Each_Employee_Department_Description_Is_Correctly_Mapped)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Check for each Employee, Department Description is correctly mapped') ('') )
    
    Clr_List Named(#w_lEmployeeTable)
    Select Fields(*ALL) From_File(VTLI0041A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Fetch Fields(#DEPTDESC) From_File(VTLI0041B) With_Key(#XDEPTMENT)
    If (#I0041DeptDescPJC *EQ #DEPTDESC)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Correctly mapped Department Description as "' + #I0041DeptDescPJC + '"') ('') )
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Incorrectly mapped Department Description as "' + #I0041DeptDescPJC + '"') ('') )
    Leave
    Endif
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lEmployeeTable)
    Endroutine
    
    
    Mthroutine Name(mthUpdate_Department_Description_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Updating Department Description of table VTLI0041B') ('') )
    If (#Com_Owner.mthUpdate_Record_From_Department_Table( #this_rc ) *EQ FALSE)
    #Com_Owner.mthAdd_SubMsg( ER ('- Record does not exist') ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthUpdate_Record_From_Department_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Updating record of table VTLI0041B for Key #XDEPTMENT ' + #XDEPTMENT + ' with Description as Department Description "' + #DEPTDESC + '"') ('') )
    #this_is_ok := true
    Update Fields(#DEPTDESC) In_File(VTLI0041B) With_Key(#XDEPTMENT) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #this_is_ok := false
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('') )
    Endif
    Endroutine
    
    
    Mthroutine Name(mthClearDataFromEmployeeTable)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #Com_Owner.mthAdd_SubMsg( OK '-  Clear data from Employee table VTLI0041A' '' )
    
    Clr_List Named(#w_lEmployeeTable)
    Select Fields(#EMPID) From_File(VTLI0041A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lEmployeeTable)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('-  ' + #LF_Records_Count_Employee_Table.AsString + ' record(s) found') '' )
    
    If (#LF_Records_Count_Employee_Table > 0)
    Define Field(#LF_i) Reffld(#Std_Count)
    Begin_Loop Using(#LF_i) To(#LF_Records_Count_Employee_Table)
    Get_Entry Number(#LF_i) From_List(#w_lEmployeeTable)
    
    Delete From_File(VTLI0041A) With_Key(#EMPID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('Deleting on record ' + #EMPID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Ok') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lEmployeeTable)
    Endroutine
    
    Mthroutine Name(mthClearDataFromDepartmentTable)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #Com_Owner.mthAdd_SubMsg( OK '-  Clear data from Department table VTLI0041A' '' )
    
    Clr_List Named(#w_lDepartmentTable)
    Select Fields(#XDEPTMENT) From_File(VTLI0041B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDepartmentTable)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('-  ' + #LF_Records_Count_Department_Table.AsString + ' record(s) found') '' )
    
    If (#LF_Records_Count_Department_Table > 0)
    Define Field(#LF_j) Reffld(#Std_Count)
    Begin_Loop Using(#LF_j) To(#LF_Records_Count_Department_Table)
    Get_Entry Number(#LF_j) From_List(#w_lDepartmentTable)
    
    Delete From_File(VTLI0041B) With_Key(#XDEPTMENT) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('Deleting on record ' + #XDEPTMENT) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Ok') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lDepartmentTable)
    Endroutine
    
    
    Mthroutine Name(mthFetch_Record_From_Department_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Verifying data from Department table VTLI0041B. It must have the record with Key as Department Code "' + #XDEPTMENT + '"') ('') )
    If (#Com_Owner.mthFetch_Record_From_Department_Table( #this_rc ) *EQ FALSE)
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record does not exist') ('') )
    Endif
    Endroutine
    
    
    Mthroutine Name(mthFetch_Record_From_Department_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetching record from Department table VTLI0041B with Key as Department Code "' + #XDEPTMENT + '"') ('') )
    #this_is_ok := false
    Fetch Fields(#DEPTDESC #I0041TotalSalaryPJC) From_File(VTLI0041B) With_Key(#XDEPTMENT) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetched record as Department Code "' + #XDEPTMENT + '" Department Description "' + #DEPTDESC + '"  Total Salary ' + #I0041TotalSalaryPJC.AsString) ('') )
    #this_is_ok := true
    Endif
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Department_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Inserting record as Department Code "' + #XDEPTMENT + '" Department Description "' + #DEPTDESC + '" into Department table VTLI0041B') ('') )
    
    #this_is_ok := true
    Insert Fields(*ALL) To_File(VTLI0041B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #this_is_ok := false
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthFetch_Record_From_Employee_Table_Is_Successful)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Verifying data from Employee table VTLI0041A. It must have the record with Key as Employee ID "' + #EMPID.AsString + '"') ('') )
    If (#Com_Owner.mthFetch_Record_From_Employee_Table( #this_rc ) *EQ FALSE)
    #Com_Owner.mthAdd_SubMsg( ER ('-  Record does not exist') ('') )
    Endif
    Endroutine
    
    Mthroutine Name(mthFetch_Record_From_Employee_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetching record from Employee table VTLI0041A with Key as Employee ID "' + #EMPID.AsString + '"') ('') )
    #this_is_ok := false
    Fetch Fields(*ALL) From_File(VTLI0041A) With_Key(#EMPID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('-  Fetched record as Employee ID "' + #EMPID.AsString + '" Salary ' + #SALARY.AsString + ' Department Code "' + #XDEPTMENT + '" Department Description "' + #I0041DeptDescPJC + '"') ('') )
    #this_is_ok := true
    Endif
    Endroutine
    
    Mthroutine Name(mthAdd_Record_To_Employee_Table)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*RESULT) Class(#BIFB001A) Name(#this_is_ok)
    
    #Com_Owner.mthAdd_SubMsg( OK ('-  Inserting record as Employee ID "' + #EMPID.AsString + '" Salary ' + #SALARY.AsString + ' into Employee table VTLI0041A') ('') )
    
    #this_is_ok := true
    Insert Fields(*ALL) To_File(VTLI0041A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #this_is_ok := false
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('-  Unexpected ' + #this_rc) ('') )
    Endif
    Endroutine
    
    
    
    
