Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    * ******************************************************************************************************
    * Test Case Description
    * Issue #49 Performance Test - Using Literal and Bind Variables
    * The test setup includes a new table named VTLI0049 with Char and Integer columns
    * This test case will be utilized by LANSA developer to obtain base line performance statistics
    * and then database-specific SQL to act over that table using bind variables
    * ******************************************************************************************************
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Count) Reffld(#Std_Count)
    Define Field(#LF_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_logfile_name) Reffld(#BIFA256A)
    
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    #Com_Owner.mthGetExecutionType()
    #Com_Owner.mthAdd_SubMsg( OK 'Database Type' (#LF_DB_Type) )
    
    *
    * Tests are only to be executed when run from within the MSSQL System.
    * Only on Windows 32 bit.
    * The MSSQL Test is only executed when its all local, not in SuperServer mode.
    * All the other databases are ONLY run when running as a SuperServer Function (not local and not SuperServer IO).
    *
    If (*OSBITNESS *EQ 32)
    If (((#LF_Execution_Type *EQ W) *And (#LF_Local_Platform *EQ W) *And (#LF_DB_Type *EQ MSSQLS)) OrIf ((#LF_Execution_Type *EQ F) *And (#LF_Local_Platform *EQ W) *And (#LF_Remote_Platform *EQ W) *And (#LF_DB_Type *NE MSSQLS)))
    #LF_logfile_name := 'c:\program files (x86)\lansa\PerformanceMetricsLog.txt'
    #com_owner.mthDoDelete( #LF_rc )
    #Com_Owner.mthInsert( #LF_rc )
    
    If ((#LF_DB_Type *EQ MSSQLS))
    #Com_Owner.mthAdd_Msg( OK ('Deleting the Performance Metrics log file if it already exists') ('') )
    Use Builtin(OV_File_Service) With_Args(REMOVE_FILE #LF_logfile_name) To_Get(#Lf_rc)
    Endif
    
    #com_Owner.mthExecuteSqlInLansa( #Lf_rc )
    #Com_Owner.mthExecuteSqlScript( #Lf_rc )
    Else
    #Com_Owner.mthAdd_Msg( OK ('Skipping test on this platform') ('') )
    Endif
    Else
    #Com_Owner.mthAdd_Msg( OK ('Skipping test on 64 bit') ('') )
    Endif
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Return
    
    *
    * Delete Data.
    *
    Mthroutine Name(mthDoDelete)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #LF_i := 0
    Dowhile Cond(#this_rc = OK)
    Fetch Fields(#F157033K2) From_File(VTLI0049) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #LF_i += 1
    Delete From_File(VTLI0049) With_Key(#F157033K2) Io_Error(*NEXT) Val_Error(*NEXT)
    Endif
    Endwhile
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Delete Data' (#LF_i.AsString + ' set of key records deleted from VTLI0049') )
    Endroutine
    
    *
    * Insert Data
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #F157033K1 := #VTF_KEY1 + #VTF_KEY2 + #VTF_KEY3
    #F157033K2 := 0
    #Lf_Count := 1000
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#Lf_Count)
    #F157033K2 += 1
    Insert Fields(*ALL) To_File(VTLI0049) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    
    If (#this_rc *NE OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    Endif
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Insert Data' (#F157033K2.AsString + ' / ' + #Lf_Count.AsString + ' records inserted into VTLI0049') )
    Endif
    Endroutine
    
    *
    * Execute Sql Script on MSSQL, MySql,Azure SQL, Oracle and SQL Anywhere
    *
    Mthroutine Name(mthExecuteSqlScript)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #LF_rc := OK
    Define Field(#LF_script) Reffld(#STD_STRNG)
    Define Field(#LF_Command) Reffld(#STD_STRNG)
    Define Field(#LF_parameters) Reffld(#STD_STRNG)
    Define Field(#LF_ReturnCode) Reffld(#STD_INT)
    
    Case Of_Field(#LF_DB_Type)
    When Value_Is(= MSSQLS)
    #LF_Command := 'mssql-performance-metrics.ps1'
    
    When Value_Is(= SQLAZURE)
    #LF_Command := 'sqlazure-performance-metrics.ps1'
    
    When Value_Is(= ODBCORACLE)
    #LF_Command := 'odbcoracle-performance-metrics.ps1'
    
    When Value_Is(= MYSQL)
    #LF_Command := 'mysql-performance-metrics.ps1'
    
    When Value_Is(= SQLANYWHERE)
    #LF_command := 'sqlanywhere-performance-metrics.ps1'
    Endcase
    
    #Com_Owner.RunPowershellScript Scriptname(#LF_Command) Parameters('') Logname(#LF_logfile_name) Isignoreerrors(False) Returncode(#LF_ReturnCode)
    
    If (#LF_ReturnCode <> 0)
    #Com_Owner.mthAdd_SubMsg( ER ('PowerShell error Return Code ' + #LF_ReturnCode.asString) ('') )
    #this_rc := ER
    Endif
    
    Endroutine
    
    *
    * Execute SQL in LANSA and log the time
    *
    Mthroutine Name(mthExecuteSqlInLansa)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define Field(#Start) Type(*DEC) Length(10) Decimals(3)
    Define Field(#Finish) Type(*DEC) Length(10) Decimals(3)
    Define Field(#Duration) Type(*DEC) Length(7) Decimals(0)
    Define Field(#DB_Type) Type(*CHAR) Length(32)
    Define Field(#LANSA) Type(*CHAR) Length(32)
    Define Field(#LansaTime) Type(*CHAR) Length(32)
    Def_List Name(#w_lLansaExecutionList) Fields(#DB_Type #LANSA #LansaTime) Type(*WORKING) Entrys(*MAX)
    
    #LF_rc := OK
    #LANSA := ' ' + 'LANSA'
    Case Of_Field(#LF_DB_Type)
    When Value_Is(= MSSQLS = SQLAZURE = ODBCORACLE = MYSQL = SQLANYWHERE)
    * Start Time
    #Start := #STD_DTIMX.Now().AsSeconds
    
    Select Fields(#F157033K1) From_File(VTLI0049) Where(#F157033K2 <= 1000) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    * #Com_Owner.mthAdd_SubMsg( OK ('Fetching Row ' + #F157033K2.AsString) ('') )
    Endselect
    
    * End Time
    #Finish := #STD_DTIMX.Now().AsSeconds
    #Duration := (#Finish - #Start) * 1000
    
    #DB_Type := #LF_DB_Type.AsValue
    #LansaTime := ' ' + #Duration.AsString()
    Add_Entry To_List(#w_lLansaExecutionList)
    * Log the time to file
    Use Builtin(TRANSFORM_LIST) With_Args(#w_lLansaExecutionList #LF_logfile_name 'O') To_Get(#this_rc)
    Close /*close the log file*/
    Endcase
    
    If (#this_rc = ER)
    #Com_Owner.mthAdd_SubMsg( ER ('Sql Execution in LANSA returned error ' + #this_rc) ('') )
    Return
    Endif
    Endroutine
    
    *
    * Local Function
    *    #LF_Execution_Type= W, #LF_Local_Platform W, #LF_Remote_Platform=
    * SuperServer Function Call
    *    #LF_Execution_Type= F, #LF_Local_Platform W, #LF_Remote_Platform= W
    *    #LF_Execution_Type= F, #LF_Local_Platform W, #LF_Remote_Platform= I
    * SuperServer IO Call
    *    #LF_Execution_Type= Q, #LF_Local_Platform W, #LF_Remote_Platform= W
    *    #LF_Execution_Type= Q, #LF_Local_Platform W, #LF_Remote_Platform= I
    *
    Mthroutine Name(mthGetExecutionType)
    Define Field(#LF_Execution_Type) Reffld(#Std_Alpha) /* W = Windows, I = IBMi, F = SuperServer Function Call, Q = SuperServer IO */
    Define Field(#LF_Local_Platform) Reffld(#BIFA001A) /* W = Windows, I = IBMi */
    Define Field(#LF_Remote_Platform) Reffld(#BIFA001A) /* Blank is not remote, W = Windows, I = IBMi */
    
    Get_Entry Number(1) From_List(#wLKData)
    #Com_Owner.mthAdd_Msg( OK ('VTF_KEY1= ' + #VTF_KEY1 + ', VTF_KEY2= ' + #VTF_KEY2 + ', VTF_KEY3= ' + #VTF_KEY3) '' )
    
    #LF_Execution_Type := #VTF_KEY1
    #LF_Local_Platform := #VTF_KEY1.Substring( 4 1 )
    #LF_Remote_Platform := #VTF_KEY1.Substring( 9 1 )
    
    If (#LF_Local_Platform *EQ '')
    #LF_Local_Platform := #LF_Execution_Type
    Endif
    #Com_Owner.mthAdd_Msg( OK ('#LF_Execution_Type= ' + #LF_Execution_Type + ', #LF_Local_Platform ' + #LF_Local_Platform + ', #LF_Remote_Platform= ' + #LF_Remote_Platform) '' )
    Endroutine
    
    *
    * Add a message to the Return Message List.
    *
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Add a sub message to the Return Message List.
    *
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    Mthroutine Name(RunPowershellScript) Options(*FINAL)
    Define_Map For(*INPUT) Class(#STD_STRNG) Name(#ScriptName)
    Define_Map For(*INPUT) Class(#STD_STRNG) Name(#Parameters)
    Define_Map For(*INPUT) Class(#STD_STRNG) Name(#LogName)
    Define_Map For(*INPUT) Class(#PRIM_BOLN) Name(#IsIgnoreErrors) Mandatory(false)
    Define_Map For(*INPUT) Class(#STD_STRNG) Name(#ScriptDirectory) Mandatory(*NULL) Desc('Default is git repo scripts directory')
    Define_Map For(*OUTPUT) Class(#STD_INT) Name(#ReturnCode) Mandatory(0)
    Define_Map For(*RESULT) Class(#Prim_boln) Name(#Result)
    
    Define_Com Class(#std_strng) Name(#CmdLine)
    
    #Result := False
    
    If (#ScriptDirectory.IsNull)
    #ScriptDirectory := *ROOT_DIR + '\LANSA\VersionControl\Scripts\'
    Endif
    
    #CmdLine := '%SystemRoot%\sysnative\WindowsPowerShell\v1.0\powershell.exe '
    #CmdLine += '-NonInteractive -NoProfile -ExecutionPolicy unrestricted -command "& {'
    #CmdLine += 'cmd /c exit -2;' /* set an exit code that indicates there is a syntax error elsewhere on this cmdline */
    * #CmdLine += '$env:processor_architecture; '    /* Enable this to show the bitness of Powershell being executed - expected to be 64 bit */
    #CmdLine += "&'" + #ScriptDirectory + #ScriptName + "'" + ' '
    #CmdLine += #Parameters
    * #CmdLine += ';pause' /* Enable this line to diagnose syntax issues */
    * #CmdLine += " 2>&1 | Out-File -Append -Encoding 'ASCII' -FilePath '" + #LogName + "';"
    #CmdLine += ';exit $LastExitCode}"'
    
    #Com_Owner.mthAdd_SubMsg( OK ('Running ' + #CmdLine) (' in directory ' + #ScriptDirectory) )
    
    If ((*Not #COM_SELF.ExecuteSystemCommand( #CmdLine #ScriptDirectory #LogName #ReturnCode )) *And (*Not #IsIgnoreErrors))
    #Com_Owner.mthAdd_SubMsg( ER ('Powershell error ' + #ReturnCode.AsString) ('') )
    Endif
    
    Endroutine
    
    * Execute a non-builtin program
    * Command line programs like dir, copy, etc will not work.
    Mthroutine Name(ExecuteSystemCommand)
    Define_Map For(*INPUT) Class(#std_strng) Name(#Command)
    Define_Map For(*INPUT) Class(#std_strng) Name(#Directory) Mandatory('')
    Define_Map For(*INPUT) Class(#std_strng) Name(#LogFileName) Mandatory(true)
    Define_Map For(*OUTPUT) Class(#STD_INT) Name(#ReturnCode) Mandatory(0)
    Define_Map For(*RESULT) Class(#Prim_boln) Name(#Result)
    
    Define_Com Class(#STD_qsel) Name(#CommandFile)
    Define_Com Class(#STD_NUM) Name(#StartPos)
    
    Def_List Name(#Cmd) Fields(#STD_STRNG) Type(*WORKING)
    
    #Result := False
    
    #CommandFile := *temp_dir + 'ExecuteSystemCommand.cmd'
    
    Clr_List Named(#Cmd)
    
    If (#Directory = *blank)
    #directory := *ROOT_DIR
    Endif
    
    #StartPos := 1
    If (#Directory.Substring( 1 1 ) *EQ '"')
    * Skip past a double quote
    #StartPos := 2
    Endif
    
    #STD_STRNG := "@ECHO OFF"
    Add_Entry To_List(#Cmd)
    
    #STD_STRNG := #Directory.substring( #StartPos 2 )
    Add_Entry To_List(#Cmd)
    
    #STD_STRNG := 'cd ' + #Directory
    Add_Entry To_List(#Cmd)
    
    #STD_STRNG := #Command
    Add_Entry To_List(#Cmd)
    
    Use Builtin(transform_list) With_Args(#Cmd #CommandFile T *Default *Default '.') To_Get(#LF_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Running ' + #CommandFile + ' logged to ' + #LogFileName) ('') )
    
    Use Builtin(SYSTEM_COMMAND) With_Args(B (#CommandFile + ' >> "' + #LogFileName + '" 2>&1')) To_Get(#ReturnCode)
    
    If (#ReturnCode <> 0)
    Return
    Endif
    
    #Result := True
    
    Endroutine
    
