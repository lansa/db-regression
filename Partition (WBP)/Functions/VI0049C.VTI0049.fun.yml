Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    * ******************************************************************************************************
    * Test Case Description
    * Issue #49 Performance Test - Using Literal and Bind Variables
    * The test setup includes a new table named VTLI0049 with Char and Integer columns
    * This test case will be utilized by LANSA developer to obtain base line performance statistics
    * and then database-specific SQL to act over that table using bind variables
    * ******************************************************************************************************
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Count) Reffld(#Std_Count)
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_logfile_name) Reffld(#BIFA010A)
    Define Field(#LF_commandLine_script) Reffld(#BIFA010A)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    Get_Entry Number(1) From_List(#wLKData)
    
    * DELETE / INSERT TEST DATA.
    #com_owner.mthDoDelete( #LF_rc )
    #Com_Owner.mthInsert( #LF_rc )
    
    *
    * Execute SQL script
    *
    * Initialize local variables.
    * #LF_rc := OK
    * #LF_logfile_name := 'c:\temp\PerformanceMetricsLog.txt'
    * #LF_commandLine_script := 'SQLCMD -S <servername/InstanceName> -U -P -i "C:\Program Files (x86)\Lansa\LANSA\VersionControl\Scripts\mssql-performance-statistics-bind.sql'
    *
    * Use Builtin(SYSTEM_COMMAND) With_Args('X' #LF_commandLine_script ' ' #LF_logfile_name) To_Get(#STD_NUM)
    * If Cond(#LF_rc = ER)
    * #Com_Owner.mthAdd_SubMsg( ER ('- Log file path does not exist: ' + #LF_logfile_name) ('') )
    * Endif
    
    *
    * Delete Data.
    *
    Mthroutine Name(mthDoDelete)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #LF_i := 0
    Dowhile Cond(#this_rc = OK)
    Fetch Fields(#F157033K1 #F157033K2) From_File(VTLI0049) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #LF_i += 1
    Delete From_File(VTLI0049) With_Key(#F157033K2) Io_Error(*NEXT) Val_Error(*NEXT)
    Endif
    Endwhile
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Delete Data' (#LF_i.AsString + ' set of key records deleted from VTLI0049') )
    Endroutine
    
    *
    * Insert Data
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    #F157033K1 := #VTF_KEY1 + #VTF_KEY2 + #VTF_KEY3
    #F157033K2 := 0
    #Lf_Count := 1000
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#Lf_Count)
    #F157033K2 += 1
    Insert Fields(*ALL) To_File(VTLI0049) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    
    If (#this_rc *NE OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    Endif
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Insert Data' (#F157033K2.AsString + ' / ' + #Lf_Count.AsString + ' records inserted into VTLI0049') )
    Endif
    Endroutine
    
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
