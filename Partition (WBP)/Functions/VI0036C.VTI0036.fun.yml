Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Issue #36 Test the OAM after importing of the table definition into LANSA
    * Sql scripts need to be executed to create the tables before the Function can execute correctly, use the below commandline and change credential
    * MSSQLS       - SQLCMD.exe -S Localhost -d LANSA -U $sql_username -P $sql_password -i mssql-table-definition.sql
    * SQLAZURE     - SQLCMD.exe -S $ODBC.server -d $ODBC.database -U $sql_username -P $sql_password -i sqlazure-table-definition.sql
    * ODBCORACLE   - sqlplus -s -NOLOGINTIME $sql_username/$sql_password@ora19cdb @odbcoracle-table-definition.sql
    * MYSQL        - get-content mysql-table-definition.sql | & "C:\Program Files\mysql\MySQL Workbench 8.0 CE\mysql.exe" --defaults-file=my.ini.lansa --skip-column-names
    * SQLANYWHERE  - dbisql -c "UID=$sql_username;PWD=$sql_password;DSN=SQLANYWHERE" -onerror exit -nogui "sqlanywhere-table-definition.sql"
    * *******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Original_Count) Reffld(#Std_Count)
    Define Field(#LF_DB_Count) Reffld(#Std_Count)
    Define Field(#LF_DataShown) Reffld(#BIFB001B)
    
    * Local Copies of Table Columns - matches following List fields
    Define Field(#LF_V_ID) Reffld(#V_ID)
    Define Field(#LF_V_NAME) Reffld(#V_NAME)
    Define Field(#LF_V_SURNAME) Reffld(#V_SURNAME)
    Define Field(#LF_V_LASTNAME) Reffld(#V_LASTNAME)
    Define Field(#LF_V_DATE) Reffld(#V_DATE)
    Define Field(#LF_V_SALARY) Reffld(#V_SALARY)
    Define Field(#LF_V_ACTIVE) Reffld(#V_ACTIVE)
    Define Field(#LF_V_DESC) Reffld(#V_DESC)
    Define Field(#LF_V_TAG) Reffld(#V_TAG)
    Define Field(#LF_V_TIME) Reffld(#V_TIME)
    Define Field(#LF_V_RAWDATA) Reffld(#V_RAWDATA)
    Define Field(#LF_V_DATA) Reffld(#V_DATA)
    Define Field(#LF_V_CODE) Reffld(#V_CODE)
    Define Field(#LF_V_xml) Reffld(#V_xml)
    
    
    * Local Copies of Table Columns - matches following List fields
    Define Field(#LF_MYS_ID) Reffld(#V_MYS_ID)
    Define Field(#LF_MYS_NAME) Reffld(#V_MYS_NAME)
    Define Field(#LF_MYS_SURNAME) Reffld(#V_MYS_SURNAME)
    Define Field(#LF_MYS_LASTNAME) Reffld(#V_MYS_LASTNAME)
    Define Field(#LF_MYS_DATE) Reffld(#V_MYS_DATE)
    Define Field(#LF_MYS_SALARY) Reffld(#V_MYS_SALARY)
    Define Field(#LF_MYS_ACTIVE) Reffld(#V_MYS_ACTIVE)
    Define Field(#LF_MYS_DESC) Reffld(#V_MYS_DESC)
    Define Field(#LF_MYS_TAG) Reffld(#V_MYS_TAG)
    Define Field(#LF_MYS_TIME) Reffld(#V_MYS_TIME)
    Define Field(#LF_MYS_RAWDATA) Reffld(#V_MYS_RAWDATA)
    Define Field(#LF_MYS_DATA) Reffld(#V_MYS_DATA)
    Define Field(#LF_MYS_CODE) Reffld(#V_MYS_CODE)
    Define Field(#LF_MYS_xml) Reffld(#V_MYS_xml)
    
    * Local Copies of SQLANYWHERE Table Columns - matches following List fields
    Define Field(#LF_SQA_ID) Reffld(#V_SQA_ID)
    Define Field(#LF_SQA_NAME) Reffld(#V_SQA_NAME)
    Define Field(#LF_SQA_SURNAME) Reffld(#V_SQA_SURNAME)
    Define Field(#LF_SQA_LASTNAME) Reffld(#V_SQA_LASTNAME)
    Define Field(#LF_SQA_DATE) Reffld(#V_SQA_DATE)
    Define Field(#LF_SQA_SALARY) Reffld(#V_SQA_SALARY)
    Define Field(#LF_SQA_ACTIVE) Reffld(#V_SQA_ACTIVE)
    Define Field(#LF_SQA_DESC) Reffld(#V_SQA_DESC)
    Define Field(#LF_SQA_TAG) Reffld(#V_SQA_TAG)
    Define Field(#LF_SQA_TIME) Reffld(#V_SQA_TIME)
    Define Field(#LF_SQA_RAWDATA) Reffld(#V_SQA_RAWDATA)
    Define Field(#LF_SQA_DATA) Reffld(#V_SQA_DATA)
    Define Field(#LF_SQA_CODE) Reffld(#V_SQA_CODE)
    Define Field(#LF_SQA_xml) Reffld(#V_SQA_xml)
    
    * Local Copies of ORACLE Table Columns - matches following List fields
    Define Field(#LF_ORA_ID) Reffld(#V_ORA_ID)
    Define Field(#LF_ORA_NAME) Reffld(#V_ORA_NAME)
    Define Field(#LF_ORA_SURNAME) Reffld(#V_ORA_SURNAME)
    Define Field(#LF_ORA_LASTNAME) Reffld(#V_ORA_LASTNAME)
    Define Field(#LF_ORA_DATE) Reffld(#V_ORA_DATE)
    Define Field(#LF_ORA_SALARY) Reffld(#V_ORA_SALARY)
    Define Field(#LF_ORA_ACTIVE) Reffld(#V_ORA_ACTIVE)
    Define Field(#LF_ORA_DESC) Reffld(#V_ORA_DESC)
    Define Field(#LF_ORA_TAG) Reffld(#V_ORA_TAG)
    Define Field(#LF_ORA_TIME) Reffld(#V_ORA_TIME)
    Define Field(#LF_ORA_RAWDATA) Reffld(#V_ORA_RAWDATA)
    Define Field(#LF_ORA_DATA) Reffld(#V_ORA_DATA)
    Define Field(#LF_ORA_CODE) Reffld(#V_ORA_CODE)
    
    
    * #XG_ALL includes all Fields in the Table
    Group_By Name(#XG_ALL) Fields(#V_ID #V_NAME #V_SURNAME #V_LASTNAME #V_ACTIVE #V_CODE #V_DATE #V_DESC #V_DATA #V_RAWDATA #V_SALARY #V_TAG #V_TIME #V_XML)
    Def_List Name(#w_lOriginal) Fields(#XG_ALL) Counter(#LF_Original_Count) Type(*WORKING)
    
    Group_By Name(#XG_MysqlALL) Fields(#V_MYS_ID #V_MYS_NAME #V_MYS_SURNAME #V_MYS_LASTNAME #V_MYS_ACTIVE #V_MYS_CODE #V_MYS_DATE #V_MYS_DESC #V_MYS_DATA #V_MYS_RAWDATA #V_MYS_SALARY #V_MYS_TAG #V_MYS_TIME #V_MYS_XML)
    Def_List Name(#w_lMysqlOriginal) Fields(#XG_MysqlALL) Counter(#LF_Original_Count) Type(*WORKING)
    
    Group_By Name(#XG_SqaALL) Fields(#V_SQA_ID #V_SQA_NAME #V_SQA_SURNAME #V_SQA_LASTNAME #V_SQA_ACTIVE #V_SQA_CODE #V_SQA_DATE #V_SQA_DESC #V_SQA_DATA #V_SQA_RAWDATA #V_SQA_SALARY #V_SQA_TAG #V_SQA_TIME #V_SQA_XML)
    Def_List Name(#w_lSqaOriginal) Fields(#XG_SqaALL) Counter(#LF_Original_Count) Type(*WORKING)
    
    Group_By Name(#XG_OracleALL) Fields(#V_ORA_ID #V_ORA_NAME #V_ORA_SURNAME #V_ORA_LASTNAME #V_ORA_ACTIVE #V_ORA_CODE #V_ORA_DATE #V_ORA_DESC #V_ORA_DATA #V_ORA_RAWDATA #V_ORA_SALARY #V_ORA_TAG #V_ORA_TIME)
    Def_List Name(#w_lOracleOriginal) Fields(#XG_OracleALL) Counter(#LF_Original_Count) Type(*WORKING)
    
    Def_List Name(#w_lDB) Fields(#XG_ALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    
    * Start testing.
    Clr_List Named(#wLRet)
    
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    #Com_Owner.mthAdd_SubMsg( OK 'Database Type' (#LF_DB_Type) )
    #Com_Owner.mthGetExecutionType()
    
    *
    * Add your test case here
    * It should be a list of method calls so its easy to read whats being tested.
    If (#LF_Remote_Platform *EQ I)
    #Com_Owner.mthAdd_Msg( OK ('Skipping IBMi Test as this is only for Windows.') ('') )
    Else
    If (#LF_DB_Type *EQ MSSQLS)
    #Com_Owner.mthExecuteMSSQLS( #LF_rc )
    Else
    If (#LF_Execution_Type *EQ Q)
    #Com_Owner.mthAdd_Msg( OK ('Skipping SuperServer IO Test as Local and remote DB must be the same for the test to work') ('') )
    Else
    Case Of_Field(#LF_DB_Type)
    When Value_Is(= MSSQLS)
    #Com_Owner.mthExecuteMSSQLS( #LF_rc )
    When Value_Is(= SQLAZURE)
    #Com_Owner.mthExecuteAZURESQL( #LF_rc )
    When Value_Is(= ODBCORACLE)
    #Com_Owner.mthExecuteORACLE( #LF_rc )
    When Value_Is(= MYSQL)
    #Com_Owner.mthExecuteMYSQL( #LF_rc )
    When Value_Is(= SQLANYWHERE)
    #Com_Owner.mthExecuteSQLANYWHERE( #LF_rc )
    Endcase
    Endif
    Endif
    Endif
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    *
    * Execute tests on SQLANYWHERE
    *
    Mthroutine Name(mthExecuteSQLANYWHERE)
    Define_Map For(*BOTH) Class(#BIFA002A)
    #LF_rc := OK
    
    #Com_Owner.mthSqlAnywhereClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSqlAnywhereInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSqlAnywhereUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSqlAnywhereSelect( #LF_rc )
    Endif
    
    Endroutine
    
    *
    * Execute tests on MSSQLS
    *
    Mthroutine Name(mthExecuteMSSQLS)
    Define_Map For(*BOTH) Class(#BIFA002A)
    #LF_rc := OK
    
    #Com_Owner.mthClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelect( #LF_rc )
    Endif
    
    Endroutine
    
    *
    * Execute tests on Azure SQL
    *
    Mthroutine Name(mthExecuteAZURESQL)
    Define_Map For(*BOTH) Class(#BIFA002A)
    #LF_rc := OK
    
    #Com_Owner.mthAzureClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthAzureInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthAzureUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthAzureSelect( #LF_rc )
    Endif
    
    Endroutine
    
    *
    * Execute tests on Oracle
    *
    Mthroutine Name(mthExecuteORACLE)
    Define_Map For(*BOTH) Class(#BIFA002A)
    #LF_rc := OK
    
    #Com_Owner.mthOracleClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthOracleInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthOracleUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthOracleSelect( #LF_rc )
    Endif
    
    Endroutine
    
    *
    * Execute tests on MYSQL
    *
    Mthroutine Name(mthExecuteMYSQL)
    Define_Map For(*BOTH) Class(#BIFA002A)
    #LF_rc := OK
    
    #Com_Owner.mthMysqlClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthMysqlInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthMysqlUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthMysqlSelect( #LF_rc )
    Endif
    
    Endroutine
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    * ORACLE Database START
    *
    *
    Mthroutine Name(mthOracleClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lOracleOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#V_ORA_ID) From_File(VTLI0036C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOracleOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lOracleOriginal)
    
    Delete From_File(VTLI0036C) With_Key(#V_ORA_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #V_ORA_ID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lOracleOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthOracleInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    
    #LF_i := 1
    #V_ORA_ID := #LF_i
    #LF_i += 1
    #V_ORA_NAME := 'TestName'
    #V_ORA_SURNAME := 'Hello'
    #V_ORA_LASTNAME := 'World'
    #V_ORA_DATE := *DATETIME
    #V_ORA_TIME := *SQLNULL
    #V_ORA_SALARY := 1000
    #V_ORA_ACTIVE := 1
    #V_ORA_DATA := 'TestData'
    #V_ORA_CODE := 123456
    #V_ORA_RAWDATA := rawdatasecond
    #V_ORA_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_ORA_TAG := *SQLNULL
    
    Add_Entry To_List(#w_lOracleOriginal)
    
    #V_ORA_ID := #LF_i
    #LF_i += 1
    #V_ORA_NAME := 'Test'
    #V_ORA_SURNAME := 'Hello1'
    #V_ORA_LASTNAME := 'World1'
    #V_ORA_DATE := *DATETIME
    #V_ORA_TIME := *TIME
    #V_ORA_SALARY := 1000
    #V_ORA_ACTIVE := 1
    #V_ORA_DATA := 'TestData'
    #V_ORA_CODE := 123456
    #V_ORA_RAWDATA := rawdata
    #V_ORA_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_ORA_TAG := *SQLNULL
    
    *
    Add_Entry To_List(#w_lOracleOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOracleOriginal)
    Insert Fields(*ALL) To_File(VTLI0036C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #V_ORA_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthOracleUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOracleOriginal)
    #V_ORA_SURNAME := 'Update'
    Update Fields(*ALL) In_File(VTLI0036C) With_Key(#V_ORA_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #V_ORA_ID.AsString + ', ' + #V_ORA_SURNAME) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthOracleSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Def_List Name(#w_lOracleDB) Fields(#XG_OracleALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lOracleDB)
    Select Fields(*ALL) From_File(VTLI0036C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOracleDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOracleOriginal)
    #LF_ORA_ID := #V_ORA_ID
    #LF_ORA_NAME := #V_ORA_NAME
    * #LF_ORA_SURNAME := #V_ORA_SURNAME
    #LF_ORA_LASTNAME := #V_ORA_LASTNAME
    #LF_ORA_DATE := #V_ORA_DATE
    #LF_ORA_SALARY := #V_ORA_SALARY
    #LF_ORA_ACTIVE := #V_ORA_ACTIVE
    #LF_ORA_TAG := #V_ORA_TAG
    #LF_ORA_TIME := #V_ORA_TIME
    #LF_ORA_RAWDATA := #V_ORA_RAWDATA
    #LF_ORA_DATA := #V_ORA_DATA
    #LF_ORA_CODE := #V_ORA_CODE
    
    #LF_RawInfo := #V_ORA_RAWDATA.AsString
    #LF_v_RawInfo := #LF_ORA_RAWDATA.AsString
    
    Get_Entry Number(#LF_i) From_List(#w_lOracleDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list #w_lOracleDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_ORA_ID <> #V_ORA_ID)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_ID data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_NAME <> #V_ORA_NAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_NAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_SURNAME <> #V_ORA_SURNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_SURNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_LASTNAME <> #V_ORA_LASTNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_LASTNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_DATE <> #V_ORA_DATE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_DATE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_SALARY <> #V_ORA_SALARY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_SALARY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_ACTIVE <> #V_ORA_ACTIVE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_ACTIVE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_DESC <> #V_ORA_DESC)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_DESC data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_TAG <> #V_ORA_TAG)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_TAG data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_TIME <> #V_ORA_TIME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_TIME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_v_RawInfo <> #LF_RawInfo)
    #Com_Owner.mthAdd_SubMsg( OK ('- Field #V_ORA_RAWDATA data ' + #V_ORA_RAWDATA.AsString) '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_DATA <> #V_ORA_DATA)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_DATA data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_ORA_CODE <> #V_ORA_CODE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ORA_CODE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #V_ORA_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    *
    *  ORACLE Database END
    
    * ---------------------------------------------------------------------------------
    
    *  SQLANYWHERE Database START
    
    *
    *
    *
    Mthroutine Name(mthSqlAnywhereClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lSqaOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#V_SQA_ID) From_File(VTLI0036E) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lSqaOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lSqaOriginal)
    
    Delete From_File(VTLI0036E) With_Key(#V_SQA_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #V_SQA_ID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lSqaOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSqlAnywhereInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    #LF_i := 1
    #V_SQA_ID := #LF_i
    #LF_i += 1
    #V_SQA_NAME := 'Hello'
    #V_SQA_SURNAME := 'World'
    #V_SQA_LASTNAME := 'MR'
    #V_SQA_DATE := *DATE
    #V_SQA_TIME := *TIME
    #V_SQA_SALARY := 23232
    #V_SQA_ACTIVE := 0
    #V_SQA_DATA := 'My Data'
    #V_SQA_CODE := 1234567897
    #V_SQA_xml := *Sqlnull
    #V_SQA_RAWDATA := rawdatasecond
    #V_SQA_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_SQA_TAG := *SQLNULL
    
    Add_Entry To_List(#w_lSqaOriginal)
    
    #V_SQA_ID := #LF_i
    #LF_i += 1
    #V_SQA_NAME := 'Test'
    #V_SQA_SURNAME := 'Surname'
    #V_SQA_LASTNAME := 'MR'
    #V_SQA_DATE := *DATE
    #V_SQA_TIME := *TIME
    #V_SQA_SALARY := 23232
    #V_SQA_ACTIVE := 0
    #V_SQA_DATA := 'MyData'
    #V_SQA_CODE := 1234567
    #V_SQA_xml := *Sqlnull
    #V_SQA_RAWDATA := rawdatasecond
    #V_SQA_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_SQA_TAG := *SQLNULL
    
    Add_Entry To_List(#w_lSqaOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lSqaOriginal)
    Insert Fields(*ALL) To_File(VTLI0036E) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #V_SQA_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthSqlAnywhereUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lSqaOriginal)
    #V_SQA_SURNAME := 'Update'
    Update Fields(*ALL) In_File(VTLI0036E) With_Key(#V_SQA_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #V_SQA_ID.AsString + ', ' + #V_SQA_SURNAME) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthSqlAnywhereSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Def_List Name(#w_lSqaDB) Fields(#XG_SqaALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lSqaDB)
    Select Fields(*ALL) From_File(VTLI0036E) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lSqaDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lSqaOriginal)
    #LF_SQA_ID := #V_SQA_ID
    #LF_SQA_NAME := #V_SQA_NAME
    * #LF_SQA_SURNAME := #V_SQA_SURNAME
    #LF_SQA_LASTNAME := #V_SQA_LASTNAME
    #LF_SQA_DATE := #V_SQA_DATE
    #LF_SQA_SALARY := #V_SQA_SALARY
    #LF_SQA_ACTIVE := #V_SQA_ACTIVE
    #LF_SQA_TAG := #V_SQA_TAG
    #LF_SQA_TIME := #V_SQA_TIME
    #LF_SQA_RAWDATA := #V_SQA_RAWDATA
    #LF_SQA_DATA := #V_SQA_DATA
    #LF_SQA_CODE := #V_SQA_CODE
    #LF_SQA_xml := #V_SQA_xml
    
    #LF_RawInfo := #V_SQA_RAWDATA.AsString
    #LF_v_RawInfo := #LF_SQA_RAWDATA.AsString
    
    Get_Entry Number(#LF_i) From_List(#w_lSqaDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list w_lMysqlDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_SQA_ID <> #V_SQA_ID)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_ID data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_NAME <> #V_SQA_NAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MSQA_NAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_SURNAME <> #V_SQA_SURNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_SURNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_LASTNAME <> #V_SQA_LASTNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_LASTNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_DATE <> #V_SQA_DATE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_DATE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_SALARY <> #V_SQA_SALARY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_SALARY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_ACTIVE <> #V_SQA_ACTIVE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_ACTIVE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_DESC <> #V_SQA_DESC)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_DESC data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_TAG <> #V_SQA_TAG)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_TAG data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_TIME <> #V_SQA_TIME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_TIME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_v_RawInfo <> #LF_RawInfo)
    #Com_Owner.mthAdd_SubMsg( OK ('- Field #V_SQA_RAWDATA data ' + #V_SQA_RAWDATA.AsString) '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_DATA <> #V_SQA_DATA)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_DATA data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_CODE <> #V_SQA_CODE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_CODE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_SQA_xml <> #V_SQA_xml)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SQA_xml data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #V_SQA_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *  SQLANYWHERE Database END
    
    
    *
    *
    *  MYSQL Database START
    *
    *
    *
    Mthroutine Name(mthMysqlClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lMysqlOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#V_MYS_ID) From_File(VTLI0036D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lMysqlOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lMysqlOriginal)
    
    Delete From_File(VTLI0036D) With_Key(#V_MYS_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #V_MYS_ID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lMysqlOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthMysqlInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    #LF_i := 1
    #V_MYS_ID := #LF_i
    #LF_i += 1
    #V_MYS_NAME := 'Hello'
    #V_MYS_SURNAME := 'World'
    #V_MYS_LASTNAME := 'MR'
    #V_MYS_DATE := *DATE
    #V_MYS_TIME := *TIME
    #V_MYS_SALARY := 23232
    #V_MYS_ACTIVE := 0
    #V_MYS_DATA := 'My Data'
    #V_MYS_CODE := 1234567897
    #V_MYS_xml := *Sqlnull
    #V_MYS_RAWDATA := rawdatasecond
    #V_MYS_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_MYS_TAG := *SQLNULL
    
    Add_Entry To_List(#w_lMysqlOriginal)
    
    #V_MYS_ID := #LF_i
    #LF_i += 1
    #V_MYS_NAME := 'Test'
    #V_MYS_SURNAME := 'Surname'
    #V_MYS_LASTNAME := 'MR'
    #V_MYS_DATE := *DATE
    #V_MYS_TIME := *TIME
    #V_MYS_SALARY := 23232
    #V_MYS_ACTIVE := 0
    #V_MYS_DATA := 'MyData'
    #V_MYS_CODE := 1234567
    #V_MYS_xml := *Sqlnull
    #V_MYS_RAWDATA := rawdatasecond
    #V_MYS_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_MYS_TAG := *SQLNULL
    
    Add_Entry To_List(#w_lMysqlOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lMysqlOriginal)
    Insert Fields(*ALL) To_File(VTLI0036D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #V_MYS_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthMysqlUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    #V_MYS_SURNAME := 'Update'
    Update Fields(*ALL) In_File(VTLI0036D) With_Key(#V_MYS_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #V_MYS_ID.AsString + ', ' + #V_SURNAME) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthMysqlSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Def_List Name(#w_lMysqlDB) Fields(#XG_MysqlALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lMysqlDB)
    Select Fields(*ALL) From_File(VTLI0036D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lMysqlDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lMysqlOriginal)
    #LF_MYS_ID := #V_MYS_ID
    #LF_MYS_NAME := #V_MYS_NAME
    * #LF_MYS_SURNAME := #V_MYS_SURNAME
    #LF_MYS_LASTNAME := #V_MYS_LASTNAME
    #LF_MYS_DATE := #V_MYS_DATE
    #LF_MYS_SALARY := #V_MYS_SALARY
    #LF_MYS_ACTIVE := #V_MYS_ACTIVE
    #LF_MYS_TAG := #V_MYS_TAG
    #LF_MYS_TIME := #V_MYS_TIME
    #LF_MYS_RAWDATA := #V_MYS_RAWDATA
    #LF_MYS_DATA := #V_MYS_DATA
    #LF_MYS_CODE := #V_MYS_CODE
    #LF_MYS_xml := #V_MYS_xml
    
    #LF_RawInfo := #V_MYS_RAWDATA.AsString
    #LF_v_RawInfo := #LF_MYS_RAWDATA.AsString
    
    Get_Entry Number(#LF_i) From_List(#w_lMysqlDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list w_lMysqlDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_MYS_ID <> #V_MYS_ID)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_ID data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_NAME <> #V_MYS_NAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_NAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_SURNAME <> #V_SURNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_SURNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_LASTNAME <> #V_MYS_LASTNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_LASTNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_DATE <> #V_MYS_DATE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_DATE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_SALARY <> #V_MYS_SALARY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_SALARY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_ACTIVE <> #V_MYS_ACTIVE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_ACTIVE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_DESC <> #V_MYS_DESC)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_DESC data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_TAG <> #V_MYS_TAG)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_TAG data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_TIME <> #V_MYS_TIME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_TIME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_v_RawInfo <> #LF_RawInfo)
    #Com_Owner.mthAdd_SubMsg( OK ('- Field #V_MYS_RAWDATA data ' + #V_MYS_RAWDATA.AsString) '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_DATA <> #V_MYS_DATA)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DATA data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_CODE <> #V_MYS_CODE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_CODE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_MYS_xml <> #V_MYS_xml)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_MYS_xml data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #V_MYS_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *  MYSQL Database END
    
    
    *
    *
    *
    Mthroutine Name(mthClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#V_ID) From_File(VTLI0036A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lOriginal)
    
    Delete From_File(VTLI0036A) With_Key(#V_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #V_ID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define Field(#LF_TagValue) Reffld(#V_TAG)
    
    * Create Test Data list
    
    #LF_i := 1
    #V_ID := #LF_i
    #LF_i += 1
    #V_NAME := 'TESTER'
    #V_SURNAME := 'TTT'
    #V_LASTNAME := 'LLL'
    #V_DATE := *DATE
    #V_TIME := *TIME
    #V_SALARY := 10000
    #V_ACTIVE := 1
    #V_DATA := 'Stored Data'
    #V_CODE := 1234567897
    #V_xml := *Sqlnull
    #V_RAWDATA := rawdataone
    #V_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_TAG := #LF_TagValue
    
    Add_Entry To_List(#w_lOriginal)
    
    #V_ID := #LF_i
    #LF_i += 1
    #V_NAME := 'Hello'
    #V_SURNAME := 'World'
    #V_LASTNAME := 'MR'
    #V_DATE := *DATE
    #V_TIME := *TIME
    #V_SALARY := 23232
    #V_ACTIVE := 0
    #V_DATA := 'My Data'
    #V_CODE := 1234567897
    #V_xml := *Sqlnull
    #V_RAWDATA := rawdatasecond
    #V_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_TAG := #LF_TagValue
    
    Add_Entry To_List(#w_lOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    Insert Fields(*ALL) To_File(VTLI0036A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #V_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    #V_SURNAME := 'Update'
    Update Fields(*ALL) In_File(VTLI0036A) With_Key(#V_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #V_ID.AsString + ', ' + #V_SURNAME) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_RawInfo) Type(*STRING) Length(50)
    Define Field(#LF_v_RawInfo) Type(*STRING) Length(50)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    Select Fields(*ALL) From_File(VTLI0036A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_V_ID := #V_ID
    #LF_V_NAME := #V_NAME
    * #LF_V_SURNAME := #V_SURNAME
    #LF_V_LASTNAME := #V_LASTNAME
    #LF_V_DATE := #V_DATE
    #LF_V_SALARY := #V_SALARY
    #LF_V_ACTIVE := #V_ACTIVE
    #LF_V_TAG := #V_TAG
    #LF_V_TIME := #V_TIME
    #LF_V_RAWDATA := #V_RAWDATA
    #LF_V_DATA := #V_DATA
    #LF_V_CODE := #V_CODE
    #LF_V_xml := #V_xml
    
    #LF_RawInfo := #V_RAWDATA.AsString
    #LF_v_RawInfo := #LF_V_RAWDATA.AsString
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_V_ID <> #V_ID)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #LF_V_ID data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_NAME <> #V_NAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #LF_V_NAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_SURNAME <> #V_SURNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SURNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_LASTNAME <> #V_LASTNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_LASTNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_DATE <> #V_DATE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DATE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_SALARY <> #V_SALARY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SALARY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_ACTIVE <> #V_ACTIVE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ACTIVE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_DESC <> #V_DESC)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DESC data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_TAG <> #V_TAG)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_TAG data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_TIME <> #V_TIME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_TIME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_v_RawInfo <> #LF_RawInfo)
    #Com_Owner.mthAdd_SubMsg( OK ('- Field #V_RAWDATA data ' + #V_RAWDATA.AsString) '' )
    #this_rc := ER
    Endif
    If (#LF_V_DATA <> #V_DATA)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DATA data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_CODE <> #V_CODE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_CODE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_xml <> #V_xml)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_xml data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #V_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    * AZURE Database
    *
    *
    *
    Mthroutine Name(mthAzureClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#V_ID) From_File(VTLI0036B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lOriginal)
    
    Delete From_File(VTLI0036B) With_Key(#V_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #V_ID.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthAzureInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    
    #LF_i := 1
    #V_ID := #LF_i
    #LF_i += 1
    #V_NAME := 'TESTERDATA'
    #V_SURNAME := 'JJJ'
    #V_LASTNAME := 'kkkk'
    #V_DATE := *DATE
    #V_TIME := *TIME
    #V_SALARY := 10000
    #V_ACTIVE := 1
    #V_DATA := 'Stored Data'
    #V_CODE := 1234567897
    #V_xml := *Sqlnull
    #V_RAWDATA := 'RAWDATA'
    #V_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_TAG := #LF_TagValue
    
    Add_Entry To_List(#w_lOriginal)
    
    #V_ID := #LF_i
    #LF_i += 1
    #V_NAME := 'Hello'
    #V_SURNAME := 'World'
    #V_LASTNAME := 'MR'
    #V_DATE := *DATE
    #V_TIME := *TIME
    #V_SALARY := 23232
    #V_ACTIVE := 0
    #V_DATA := 'My Data'
    #V_CODE := 1234567897
    #V_xml := *Sqlnull
    #V_RAWDATA := 'TestD'
    #V_DESC := *SYS_DIR + 'x_txtfra.dat'
    #V_TAG := #LF_TagValue
    
    Add_Entry To_List(#w_lOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    Insert Fields(*ALL) To_File(VTLI0036B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #V_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthAzureUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    #V_SURNAME := 'Update'
    Update Fields(*ALL) In_File(VTLI0036B) With_Key(#V_ID) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #V_ID.AsString + ', ' + #V_SURNAME) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthAzureSelect)
    Define_Map For(*BOTH) Class(#BIFA002B) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    Select Fields(*ALL) From_File(VTLI0036B) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_V_ID := #V_ID
    #LF_V_NAME := #V_NAME
    * #LF_V_SURNAME := #V_SURNAME
    #LF_V_LASTNAME := #V_LASTNAME
    #LF_V_DATE := #V_DATE
    #LF_V_SALARY := #V_SALARY
    #LF_V_ACTIVE := #V_ACTIVE
    #LF_V_TAG := #V_TAG
    #LF_V_TIME := #V_TIME
    #LF_V_RAWDATA := #V_RAWDATA
    #LF_V_DATA := #V_DATA
    #LF_V_CODE := #V_CODE
    #LF_V_xml := #V_xml
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_V_ID <> #V_ID)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #LF_V_ID data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_NAME <> #V_NAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #LF_V_NAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_SURNAME <> #V_SURNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SURNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_LASTNAME <> #V_LASTNAME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_LASTNAME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_DATE <> #V_DATE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DATE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_SALARY <> #V_SALARY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_SALARY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_ACTIVE <> #V_ACTIVE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_ACTIVE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_DESC <> #V_DESC)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DESC data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_TAG <> #V_TAG)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_TAG data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_TIME <> #V_TIME)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_TIME data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_RAWDATA.AsHexString <> #V_RAWDATA.AsHexString)
    #Com_Owner.mthAdd_SubMsg( OK ('- Field #V_RAWDATA data ' + #V_RAWDATA.AsHexString) '' )
    Endif
    If (#LF_V_DATA <> #V_DATA)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_DATA data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_CODE <> #V_CODE)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_CODE data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_V_xml <> #V_xml)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #V_xml data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #V_ID.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthShowData
    *
    Mthroutine Name(mthShowData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (*Not #LF_DataShown)
    #LF_DataShown := True
    #Com_Owner.mthAdd_SubMsg( OK ('- data mismatch on Entry Number ' + #LF_i.AsString) ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Real Fields') ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original  #V_ID "' + #LF_V_ID.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_ID "' + #V_ID.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_NAME "' + #LF_V_NAME.AsNativeString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_NAME "' + #V_NAME.AsNativeString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_SURNAME "' + #LF_V_SURNAME + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_SURNAME "' + #V_SURNAME + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_LASTNAME "' + #LF_V_LASTNAME.AsNativeString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_LASTNAME "' + #V_LASTNAME.AsNativeString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_DATE  "' + #LF_V_DATE.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_DATE "' + #V_DATE.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_SALARY "' + #LF_V_SALARY.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_SALARY "' + #V_SALARY.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_ACTIVE "' + #LF_V_ACTIVE.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_ACTIVE "' + #V_ACTIVE.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_DESC "' + #LF_V_DESC + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_DESC "' + #V_DESC + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_TAG "' + #LF_V_TAG + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_TAG "' + #V_TAG + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_TIME "' + #LF_V_TIME.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_TIME "' + #V_TIME.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_RAWDATA "' + #LF_V_RAWDATA.AsHexString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_RAWDATA "' + #V_RAWDATA.AsHexString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_DATA "' + #LF_V_DATA + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_DATA "' + #V_DATA + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_CODE "' + #LF_V_CODE.AsString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_CODE "' + #V_CODE.AsString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #V_xml "' + #V_xml + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #V_xml "' + #V_xml + '"') '' )
    Endif
    Endroutine
    
    * Local Function
    *    #LF_Execution_Type= W, #LF_Local_Platform W, #LF_Remote_Platform=
    * SuperServer Function Call
    *    #LF_Execution_Type= F, #LF_Local_Platform W, #LF_Remote_Platform= W
    *    #LF_Execution_Type= F, #LF_Local_Platform W, #LF_Remote_Platform= I
    * SuperServer IO Call
    *    #LF_Execution_Type= Q, #LF_Local_Platform W, #LF_Remote_Platform= W
    *    #LF_Execution_Type= Q, #LF_Local_Platform W, #LF_Remote_Platform= I
    *
    Mthroutine Name(mthGetExecutionType)
    Define Field(#LF_Execution_Type) Reffld(#Std_Alpha) /* W = Windows, I = IBMi, F = SuperServer Function Call, Q = SuperServer IO */
    Define Field(#LF_Local_Platform) Reffld(#BIFA001A) /* W = Windows, I = IBMi */
    Define Field(#LF_Remote_Platform) Reffld(#BIFA001A) /* Blank is not remote, W = Windows, I = IBMi */
    
    Get_Entry Number(1) From_List(#wLKData)
    #Com_Owner.mthAdd_Msg( OK ('VTF_KEY1= ' + #VTF_KEY1 + ', VTF_KEY2= ' + #VTF_KEY2 + ', VTF_KEY3= ' + #VTF_KEY3) '' )
    
    #LF_Execution_Type := #VTF_KEY1
    #LF_Local_Platform := #VTF_KEY1.Substring( 4 1 )
    #LF_Remote_Platform := #VTF_KEY1.Substring( 9 1 )
    
    If (#LF_Local_Platform *EQ '')
    #LF_Local_Platform := #LF_Execution_Type
    Endif
    #Com_Owner.mthAdd_Msg( OK ('#LF_Execution_Type= ' + #LF_Execution_Type + ', #LF_Local_Platform ' + #LF_Local_Platform + ', #LF_Remote_Platform= ' + #LF_Remote_Platform) '' )
    Endroutine
    
