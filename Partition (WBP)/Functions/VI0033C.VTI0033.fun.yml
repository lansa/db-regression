Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Issue #33 Test virtual column substring and concatenation
    * The Test Data is setup with the values that all the Fields will have once the virtual field(s) are
    * set for both Read and Write evaluation. Whilst working out the exact values none of the virtuals
    * are set to Write to the Real fields. Use mthShowData to show all the values for working out the results,
    * then remove that call so the data is only shown when there is a data mismatch.
    *
    *
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Original_Count) Reffld(#Std_Count)
    Define Field(#LF_DB_Count) Reffld(#Std_Count)
    Define Field(#LF_DataShown) Reffld(#BIFB001B)
    
    Define Field(#LF_MM) Reffld(#BIFC010A)
    Define Field(#LF_DD) Reffld(#BIFC010A)
    Define Field(#LF_YY) Reffld(#BIFC010A)
    Define Field(#LF_CC) Reffld(#BIFC010A)
    
    * Local Copies of Table Columns - matches following List fields
    Define Field(#LF_BIFP0300A) Reffld(#BIFP0300A)
    Define Field(#LF_RDDMMYY) Reffld(#RDDMMYY)
    Define Field(#LF_VDDMMYY) Reffld(#VDDMMYY)
    Define Field(#LF_RMMDDYY) Reffld(#RMMDDYY)
    Define Field(#LF_VMMDDYY) Reffld(#VMMDDYY)
    Define Field(#LF_RDDMMYYYY) Reffld(#RDDMMYYYY)
    Define Field(#LF_VDDMMYYYY) Reffld(#VDDMMYYYY)
    Define Field(#LF_RMMDDYYYY) Reffld(#RMMDDYYYY)
    Define Field(#LF_VMMDDYYYY) Reffld(#VMMDDYYYY)
    Define Field(#LF_RYYYYMMDD) Reffld(#RYYYYMMDD)
    Define Field(#LF_VYYYYMMDD) Reffld(#VYYYYMMDD)
    Define Field(#LF_RYYYYDDMM) Reffld(#RYYYYDDMM)
    Define Field(#LF_VYYYYDDMM) Reffld(#VYYYYDDMM)
    Define Field(#LF_RYYMM) Reffld(#RYYMM)
    Define Field(#LF_VYYMM) Reffld(#VYYMM)
    Define Field(#LF_RMMYY) Reffld(#RMMYY)
    Define Field(#LF_VMMYY) Reffld(#VMMYY)
    Define Field(#LF_RYYYYMM) Reffld(#RYYYYMM)
    Define Field(#LF_VYYYYMM) Reffld(#VYYYYMM)
    Define Field(#LF_RMMYYYY) Reffld(#RMMYYYY)
    Define Field(#LF_VMMYYYY) Reffld(#VMMYYYY)
    Define Field(#LF_RSYSFMT) Reffld(#RSYSFMT)
    Define Field(#LF_VSYSFMT) Reffld(#VSYSFMT)
    Define Field(#LF_RSYSFMT8) Reffld(#RSYSFMT8)
    Define Field(#LF_VSYSFMT8) Reffld(#VSYSFMT8)
    
    * #XG_ALL includes all Fields in the Table
    Group_By Name(#XG_ALLREAL) Fields(#BIFP0300A #RDDMMYY #RMMDDYY #RDDMMYYYY #RMMDDYYYY #RYYYYMMDD #RYYYYDDMM #RYYMM #RMMYY #RYYYYMM #RMMYYYY #RSYSFMT8 #RSYSFMT)
    Group_By Name(#XG_ALLVIRT) Fields(#VDDMMYY #VMMDDYY #VDDMMYYYY #VMMDDYYYY #VYYYYMMDD #VYYYYDDMM #VYYMM #VMMYY #VYYYYMM #VMMYYYY #VSYSFMT8 #VSYSFMT)
    Group_By Name(#XG_ALL) Fields(#XG_ALLREAL #XG_ALLVIRT)
    
    Def_List Name(#w_lOriginal) Fields(#XG_ALL) Counter(#LF_Original_Count) Type(*WORKING)
    Def_List Name(#w_lDB) Fields(#XG_ALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    *
    * Add your test case here
    * It should be a list of method calls so its easy to read whats being tested.
    #Com_Owner.mthClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelect( #LF_rc )
    Endif
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#BIFP0300A) From_File(VTLI0033C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lOriginal)
    
    Delete From_File(VTLI0033C) With_Key(#BIFP0300A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #BIFP0300A.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    Clr_List Named(#w_lOriginal)
    * Real Fields: #BIFP0300A #BIFA256A #BIFA010A #BIFA010C #BIFA010D #BIFP0702A #BIFN0702A
    #LF_i := 1
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #LF_DD := '27'
    #LF_MM := '12'
    #LF_CC := '19'
    #LF_yy := '59'
    #COM_OWNER.mthPopulateData()
    Add_Entry To_List(#w_lOriginal)
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #LF_DD := '01'
    #LF_MM := '01'
    #LF_CC := '20'
    #LF_yy := '99'
    #COM_OWNER.mthPopulateData()
    Add_Entry To_List(#w_lOriginal)
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #LF_DD := '31'
    #LF_MM := '12'
    #LF_CC := '25'
    #LF_yy := '00'
    #COM_OWNER.mthPopulateData()
    Add_Entry To_List(#w_lOriginal)
    
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    Insert Fields(*ALL) To_File(VTLI0033C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    
    *
    * mthSelect
    *
    Mthroutine Name(mthSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    #XG_ALL := *NULL
    Select Fields(*ALL) From_File(VTLI0033C) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_BIFP0300A := #BIFP0300A
    #LF_BIFP0300A := #BIFP0300A
    #LF_RDDMMYY := #RDDMMYY
    #LF_VDDMMYY := #VDDMMYY
    #LF_RMMDDYY := #RMMDDYY
    #LF_VMMDDYY := #VMMDDYY
    #LF_RDDMMYYYY := #RDDMMYYYY
    #LF_VDDMMYYYY := #VDDMMYYYY
    #LF_RMMDDYYYY := #RMMDDYYYY
    #LF_VMMDDYYYY := #VMMDDYYYY
    #LF_RYYYYMMDD := #RYYYYMMDD
    #LF_VYYYYMMDD := #VYYYYMMDD
    #LF_RYYYYDDMM := #RYYYYDDMM
    #LF_VYYYYDDMM := #VYYYYDDMM
    #LF_RYYMM := #RYYMM
    #LF_VYYMM := #VYYMM
    #LF_RMMYY := #RMMYY
    #LF_VMMYY := #VMMYY
    #LF_RYYYYMM := #RYYYYMM
    #LF_VYYYYMM := #VYYYYMM
    #LF_RMMYYYY := #RMMYYYY
    #LF_VMMYYYY := #VMMYYYY
    #LF_RSYSFMT := #RSYSFMT
    #LF_VSYSFMT := #VSYSFMT
    #LF_RSYSFMT8 := #RSYSFMT8
    #LF_VSYSFMT8 := #VSYSFMT8
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_BIFP0300A <> #BIFP0300A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0300A data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#LF_RDDMMYY <> #RDDMMYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RDDMMYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VDDMMYY <> #VDDMMYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VDDMMYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RMMDDYY <> #RMMDDYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RMMDDYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VMMDDYY <> #VMMDDYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VMMDDYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RDDMMYYYY <> #RDDMMYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RDDMMYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VDDMMYYYY <> #VDDMMYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VDDMMYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RMMDDYYYY <> #RMMDDYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RMMDDYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VMMDDYYYY <> #VMMDDYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VMMDDYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    * If (#LF_RYYYYMMDD <> #RYYYYMMDD)
    * #Com_Owner.mthShowData( #this_rc )
    * #Com_Owner.mthAdd_SubMsg( ER ('- Field #RYYYYMMDD data mismatch') '' )
    * #this_rc := ER
    * Endif
    * If (#LF_VYYYYMMDD <> #VYYYYMMDD)
    * #Com_Owner.mthShowData( #this_rc )
    * #Com_Owner.mthAdd_SubMsg( ER ('- Field #VYYYYMMDD data mismatch') '' )
    * #this_rc := ER
    * Endif
    * If (#LF_RYYYYDDMM <> #RYYYYDDMM)
    * #Com_Owner.mthShowData( #this_rc )
    * #Com_Owner.mthAdd_SubMsg( ER ('- Field #RYYYYDDMM data mismatch') '' )
    * #this_rc := ER
    * Endif
    * If (#LF_VYYYYDDMM <> #VYYYYDDMM)
    * #Com_Owner.mthShowData( #this_rc )
    * #Com_Owner.mthAdd_SubMsg( ER ('- Field #VYYYYDDMM data mismatch') '' )
    * #this_rc := ER
    * Endif
    If (#LF_RYYMM <> #RYYMM)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RYYMM data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VYYMM <> #VYYMM)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VYYMM data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RMMYY <> #RMMYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RMMYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VMMYY <> #VMMYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VMMYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RYYYYMM <> #RYYYYMM)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RYYYYMM data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VYYYYMM <> #VYYYYMM)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VYYYYMM data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RMMYYYY <> #RMMYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RMMYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VMMYYYY <> #VMMYYYY)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VMMYYYY data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RSYSFMT <> #RSYSFMT)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RSYSFMT data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_VSYSFMT <> #VSYSFMT)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #VSYSFMT data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_RSYSFMT8 <> #RSYSFMT8)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #RSYSFMT8 data mismatch') '' )
    #this_rc := ER
    Endif
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthShowData
    *
    Mthroutine Name(mthShowData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (*Not #LF_DataShown)
    #LF_DataShown := True
    #Com_Owner.mthAdd_SubMsg( OK ('- data mismatch on Entry Number ' + #LF_i.AsString) ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Real Fields') ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFP0300A "' + #LF_BIFP0300A.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFP0300A "' + #BIFP0300A.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RDDMMYY "' + #LF_RDDMMYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RDDMMYY "' + #RDDMMYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VDDMMYY "' + #LF_VDDMMYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VDDMMYY "' + #VDDMMYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RMMDDYY "' + #LF_RMMDDYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RMMDDYY "' + #RMMDDYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VMMDDYY "' + #LF_VMMDDYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VMMDDYY "' + #VMMDDYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RDDMMYYYY "' + #LF_RDDMMYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RDDMMYYYY "' + #RDDMMYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VDDMMYYYY "' + #LF_VDDMMYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VDDMMYYYY "' + #VDDMMYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RMMDDYYYY "' + #LF_RMMDDYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RMMDDYYYY "' + #RMMDDYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VMMDDYYYY "' + #LF_VMMDDYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VMMDDYYYY "' + #VMMDDYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RYYYYMMDD "' + #LF_RYYYYMMDD + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RYYYYMMDD "' + #RYYYYMMDD + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VYYYYMMDD "' + #LF_VYYYYMMDD + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VYYYYMMDD "' + #VYYYYMMDD + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RYYYYDDMM "' + #LF_RYYYYDDMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RYYYYDDMM "' + #RYYYYDDMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VYYYYDDMM "' + #LF_VYYYYDDMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VYYYYDDMM "' + #VYYYYDDMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RYYMM "' + #LF_RYYMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RYYMM "' + #RYYMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VYYMM "' + #LF_VYYMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VYYMM "' + #VYYMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RMMYY "' + #LF_RMMYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RMMYY "' + #RMMYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VMMYY "' + #LF_VMMYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VMMYY "' + #VMMYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RYYYYMM "' + #LF_RYYYYMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RYYYYMM "' + #RYYYYMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VYYYYMM "' + #LF_VYYYYMM + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VYYYYMM "' + #VYYYYMM + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RMMYYYY "' + #LF_RMMYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RMMYYYY "' + #RMMYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VMMYYYY "' + #LF_VMMYYYY + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VMMYYYY "' + #VMMYYYY + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RSYSFMT "' + #LF_RSYSFMT + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RSYSFMT "' + #RSYSFMT + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VSYSFMT "' + #LF_VSYSFMT + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VSYSFMT "' + #VSYSFMT + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #RSYSFMT8 "' + #LF_RSYSFMT8 + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #RSYSFMT8 "' + #RSYSFMT8 + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #VSYSFMT8 "' + #LF_VSYSFMT8 + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #VSYSFMT8 "' + #VSYSFMT8 + '"') '' )
    
    Endif
    
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSigned2String)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*INPUT) Class(#BIFN0702A) Name(#this_signed)
    Define_Map For(*RESULT) Class(#BIFA009A) Name(#this_string)
    
    Define Field(#LF_IntegerCount) Reffld(#BIFINT1A) Default(5)
    Define Field(#LF_DecimalCount) Reffld(#BIFINT1A) Default(2)
    Define Field(#LF_WorkString) Reffld(#BIFA256A)
    Define Field(#LF_IntegerPart) Reffld(#BIFA005A)
    Define Field(#LF_DecimalPart) Reffld(#BIFA002A)
    Define Field(#LF_DecimalPosn) Reffld(#BIFINT1A)
    #LF_WorkString := #BIFN0702A.AsString
    #LF_DecimalPosn := #LF_WorkString.PositionOf( '.' )
    If (#LF_DecimalPosn = 0)
    #LF_IntegerPart := #LF_WorkString.Substring( 1 #LF_IntegerCount ).RightAdjust( #LF_IntegerCount '0' )
    #LF_DecimalPart := *NULL
    #LF_DecimalPart := #LF_DecimalPart.RightTrim.LeftMost( #LF_DecimalCount '0' )
    Else
    #LF_IntegerPart := #LF_WorkString.Substring( 1 (#LF_DecimalPosn - 1) ).RightAdjust( #LF_IntegerCount '0' )
    #LF_DecimalPart := #LF_WorkString.Substring( (#LF_DecimalPosn + 1) #LF_DecimalCount ).RightTrim.LeftMost( #LF_DecimalCount '0' )
    Endif
    #this_string := #LF_IntegerPart + #LF_DecimalPart
    Endroutine
    
    Mthroutine Name(mthPopulateData)
    
    #RDDMMYY #VDDMMYY := #LF_DD + #LF_MM + #LF_YY
    #RMMDDYY #VMMDDYY := #LF_MM + #LF_DD + #LF_YY
    #RDDMMYYYY #VDDMMYYYY := #LF_DD + #LF_MM + #LF_CC + #LF_YY
    #RMMDDYYYY #VMMDDYYYY := #LF_MM + #LF_DD + #LF_CC + #LF_YY
    #RYYYYMMDD #VYYYYMMDD := #LF_CC + #LF_YY + #LF_MM + #LF_DD
    #RYYYYDDMM #VYYYYDDMM := #LF_CC + #LF_YY + #LF_DD + #LF_MM
    #RYYMM #VYYMM := #LF_YY + #LF_MM
    #RMMYY #VMMYY := #LF_MM + #LF_YY
    #RYYYYMM #VYYYYMM := #LF_CC + #LF_YY + #LF_MM
    #RMMYYYY #VMMYYYY := #LF_MM + #LF_CC + #LF_YY
    #RSYSFMT #VSYSFMT := #LF_CC + #LF_DD + #LF_MM
    #RSYSFMT8 #VSYSFMT8 := #LF_CC + #LF_YY + #LF_DD + #LF_MM
    
    Endroutine
