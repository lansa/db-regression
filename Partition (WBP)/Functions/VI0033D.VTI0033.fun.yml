Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    * Issue #33 Test virtual column substring and concatenation
    * The Test Data is setup with the values that all the Fields will have once the virtual field(s) are
    * set for both Read and Write evaluation. Whilst working out the exact values none of the virtuals
    * are set to Write to the Real fields. Use mthShowData to show all the values for working out the results,
    * then remove that call so the data is only shown when there is a data mismatch.
    *
    *
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    Define Field(#LF_rc) Reffld(#BIFA002A)
    Define Field(#LF_DB_Type) Type(*CHAR) Length(32)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Original_Count) Reffld(#Std_Count)
    Define Field(#LF_DB_Count) Reffld(#Std_Count)
    Define Field(#LF_DataShown) Reffld(#BIFB001B)
    
    * Local Copies of Table Columns - matches following List fields
    Define Field(#LF_BIFP0300A) Reffld(#BIFP0300A)
    Define Field(#LF_BIFA256A) Reffld(#BIFA256A)
    Define Field(#LF_BIFA010A) Reffld(#BIFA010A)
    Define Field(#LF_BIFA010C) Reffld(#BIFA010C)
    Define Field(#LF_BIFA010D) Reffld(#BIFA010D)
    Define Field(#LF_BIFP0702A) Reffld(#BIFP0702A)
    Define Field(#LF_BIFN0702A) Reffld(#BIFN0702A)
    Define Field(#LF_BIFN0702B) Reffld(#BIFN0702B)
    Define Field(#LF_BIFA040A) Reffld(#BIFA040A)
    Define Field(#LF_BIFA040B) Reffld(#BIFA040B)
    Define Field(#LF_BIFA010B) Reffld(#BIFA010B)
    Define Field(#LF_BIFA010E) Reffld(#BIFA010E)
    Define Field(#LF_BIFA010F) Reffld(#BIFA010F)
    
    * #XG_ALL includes all Fields in the Table
    Group_By Name(#XG_ALLREAL) Fields(#BIFP0300A #BIFA256A #BIFA010A #BIFA010C #BIFA010D #BIFP0702A #BIFN0702A)
    Group_By Name(#XG_ALLVIRT) Fields(#BIFN0702B #BIFA040A #BIFA040B #BIFA010B #BIFA010E #BIFA010F)
    Group_By Name(#XG_ALLEXCLUDE) Fields(#BIFA010C #BIFA040A)
    Group_By Name(#XG_ALL) Fields(#XG_ALLREAL #XG_ALLVIRT)
    
    Def_List Name(#w_lOriginal) Fields(#XG_ALL) Counter(#LF_Original_Count) Type(*WORKING)
    Def_List Name(#w_lDB) Fields(#XG_ALL) Counter(#LF_DB_Count) Type(*WORKING)
    
    Use Builtin(Get_Session_Value) With_Args(DBUT) To_Get(#LF_DB_Type #LF_rc)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    *
    * Add your test case here
    * It should be a list of method calls so its easy to read whats being tested.
    #Com_Owner.mthClearData( #LF_rc )
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthInsert( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthUpdate( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelect( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelectAllReal( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelectAllVirtual( #LF_rc )
    Endif
    
    If (#LF_rc *EQ OK)
    #Com_Owner.mthSelectIncludeExclude( #LF_rc )
    Endif
    
    #Com_Owner.mthAdd_Msg( #LF_rc *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    *
    * Log the runtime messages produced by BIFs.
    * N.B. Only expected to be called when there is an error.
    * If it was always called the log would be swamped with irrelevant messages
    *
    Mthroutine Name(mthIssue_Runtime_Message) Options(*RECEIVES_MESSAGES)
    Define_Map For(*INPUT) Class(#BIFA002A) Name(#this_rc)
    
    Define Field(#LF_msg_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_msg_text) Reffld(#BIFMSG1)
    
    Dowhile Cond(#LF_msg_rc = OK)
    Use Builtin(GET_MESSAGE) To_Get(#LF_msg_rc #LF_msg_text)
    If Cond(#LF_msg_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc (#LF_msg_text) ('') )
    Endif
    Endwhile
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthClearData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK 'Clear Data' '' )
    
    Clr_List Named(#w_lOriginal)
    Clr_List Named(#w_lDB)
    
    Select Fields(#BIFP0300A) From_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lOriginal)
    Endselect
    
    If (#this_rc = EF)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('- ' + #LF_Original_Count.AsString + ' record(s) found') '' )
    
    If (#LF_Original_Count > 0)
    Begin_Loop Using(#LF_i) To(#LF_Original_Count)
    Get_Entry Number(#LF_i) From_List(#w_lOriginal)
    
    Delete From_File(VTLI0033D) With_Key(#BIFP0300A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Deleting on record ' + #BIFP0300A.AsString) )
    #this_rc := ER
    Leave
    Endif
    End_Loop
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) '' )
    #this_rc := ER
    Endif
    
    Clr_List Named(#w_lOriginal)
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    * Create Test Data list
    
    * Real Fields: #BIFP0300A #BIFA256A #BIFA010A #BIFA010C #BIFA010D #BIFP0702A #BIFN0702A
    #LF_i := 1
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #BIFA256A := 'Insert'
    #BIFA010A := 'AAAAAAAAAA'
    #BIFA010C := 'CCCCC'
    #BIFA010D := 'D'
    #BIFA010B := #BIFA010A
    #BIFA010E := #BIFA010C
    #BIFA010F := #BIFA010D
    #BIFP0702A := 99999.8
    #BIFN0702A := #BIFP0702A
    #BIFN0702B := #BIFN0702A
    Use Builtin(CONCAT) With_Args(#BIFA010A #BIFA010C #BIFA010D) To_Get(#BIFA040A)
    Use Builtin(CONCAT) With_Args(#BIFA010A #Com_Owner.mthSigned2String( #this_rc #BIFN0702A ) #BIFA010C) To_Get(#BIFA040B)
    Add_Entry To_List(#w_lOriginal)
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #BIFA010A := '    AA    '
    #BIFA010C := ' CCCC'
    #BIFA010D := '        D'
    #BIFA010B := #BIFA010A
    #BIFA010E := #BIFA010C
    #BIFA010F := #BIFA010D
    #BIFP0702A := 33.33
    #BIFN0702A := #BIFP0702A
    #BIFN0702B := #BIFN0702A
    Use Builtin(CONCAT) With_Args(#BIFA010A #BIFA010C #BIFA010D) To_Get(#BIFA040A)
    Use Builtin(CONCAT) With_Args(#BIFA010A #Com_Owner.mthSigned2String( #this_rc #BIFN0702A ) #BIFA010C) To_Get(#BIFA040B)
    Add_Entry To_List(#w_lOriginal)
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #BIFA010A := '         A'
    #BIFA010C := '    C'
    #BIFA010D := 'D'
    #BIFA010B := #BIFA010A
    #BIFA010E := #BIFA010C
    #BIFA010F := #BIFA010D
    #BIFP0702A := 0
    #BIFN0702A := #BIFP0702A
    #BIFN0702B := #BIFN0702A
    Use Builtin(CONCAT) With_Args(#BIFA010A #BIFA010C #BIFA010D) To_Get(#BIFA040A)
    Use Builtin(CONCAT) With_Args(#BIFA010A #Com_Owner.mthSigned2String( #this_rc #BIFN0702A ) #BIFA010C) To_Get(#BIFA040B)
    Add_Entry To_List(#w_lOriginal)
    
    #BIFP0300A := #LF_i
    #LF_i += 1
    #BIFA010A := '        AA'
    #BIFA010C := '   CC'
    #BIFA010D := 'DD'
    #BIFA010B := #BIFA010A
    #BIFA010E := #BIFA010C
    #BIFA010F := #BIFA010D
    #BIFP0702A := 4
    #BIFN0702A := #BIFP0702A
    #BIFN0702B := #BIFN0702A
    Use Builtin(CONCAT) With_Args(#BIFA010A #BIFA010C #BIFA010D) To_Get(#BIFA040A)
    Use Builtin(CONCAT) With_Args(#BIFA010A #Com_Owner.mthSigned2String( #this_rc #BIFN0702A ) #BIFA010C) To_Get(#BIFA040B)
    Add_Entry To_List(#w_lOriginal)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Insert: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    Insert Fields(*ALL) To_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Inserting record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthUpdate
    *
    Mthroutine Name(mthUpdate)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Update: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Selectlist Named(#w_lOriginal)
    #BIFA256A := 'Update'
    Update Fields(*ALL) In_File(VTLI0033D) With_Key(#BIFP0300A) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Updating record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthSelect
    *
    Mthroutine Name(mthSelect)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare All Fields in: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    #XG_ALL := *NULL
    Select Fields(*ALL) From_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_BIFP0300A := #BIFP0300A
    * #LF_BIFA256A := #BIFA256A
    #LF_BIFA010A := #BIFA010A
    #LF_BIFA010C := #BIFA010C
    #LF_BIFA010D := #BIFA010D
    #LF_BIFA010B := #BIFA010B
    #LF_BIFA010E := #BIFA010E
    #LF_BIFA010F := #BIFA010F
    #LF_BIFP0702A := #BIFP0702A
    #LF_BIFN0702A := #BIFN0702A
    #LF_BIFN0702B := #BIFN0702B
    #LF_BIFA040A := #BIFA040A
    #LF_BIFA040B := #BIFA040B
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    
    If (#LF_BIFP0300A <> #BIFP0300A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0300A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010A <> #BIFA010A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010C <> #BIFA010C)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010C data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010D <> #BIFA010D)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010D data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFP0702A <> #BIFP0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0702A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFN0702A <> #BIFN0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFN0702B <> #BIFN0702B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA040A <> #BIFA040A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA040A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA040B <> #BIFA040B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA040B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010B <> #BIFA010B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010E <> #BIFA010E)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010E data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010F <> #BIFA010F)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010F data mismatch') '' )
    #this_rc := ER
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    Mthroutine Name(mthSelectAllReal)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare all Real Fields in: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    #XG_ALL := *NULL
    Select Fields(*ALL_REAL) From_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_BIFP0300A := #BIFP0300A
    #LF_BIFA010A := #BIFA010A
    #LF_BIFA010C := #BIFA010C
    #LF_BIFA010D := #BIFA010D
    #LF_BIFP0702A := #BIFP0702A
    #LF_BIFN0702A := #BIFN0702A
    #LF_BIFA010B := #BIFA010B
    #LF_BIFA010E := #BIFA010E
    #LF_BIFA010F := #BIFA010F
    #LF_BIFN0702B := #BIFN0702B
    #LF_BIFA040A := #BIFA040A
    #LF_BIFA040B := #BIFA040B
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    #LF_DataShown := False
    
    * When using FIELDS(ALL_REAL) the entries of extended group should be null. Else report failure and exit
    
    If_Null Field(#XG_ALLVIRT)
    If (#LF_BIFP0300A <> #BIFP0300A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0300A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010A <> #BIFA010A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010C <> #BIFA010C)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010C data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010D <> #BIFA010D)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010D data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFP0702A <> #BIFP0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0702A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFN0702A <> #BIFN0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702A data mismatch') '' )
    #this_rc := ER
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) 'Some or all of the virtual fields are not null' )
    Leave
    Endif
    
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    Mthroutine Name(mthSelectAllVirtual)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare all Virtual Fields in: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    #XG_ALL := *NULL
    Select Fields(*ALL_VIRT) From_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_BIFP0300A := #BIFP0300A
    #LF_BIFA010A := #BIFA010A
    #LF_BIFA010C := #BIFA010C
    #LF_BIFA010D := #BIFA010D
    #LF_BIFP0702A := #BIFP0702A
    #LF_BIFN0702A := #BIFN0702A
    #LF_BIFA010B := #BIFA010B
    #LF_BIFA010E := #BIFA010E
    #LF_BIFA010F := #BIFA010F
    #LF_BIFN0702B := #BIFN0702B
    #LF_BIFA040A := #BIFA040A
    #LF_BIFA040B := #BIFA040B
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    #LF_DataShown := False
    
    * When using FIELDS(ALL_REAL) the entries of extended group should be null. Else report failure and exit
    
    If_Null Field(#XG_ALLREAL)
    If (#LF_BIFN0702B <> #BIFN0702B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA040A <> #BIFA040A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA040A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA040B <> #BIFA040B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA040B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010B <> #BIFA010B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010E <> #BIFA010E)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010E data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010F <> #BIFA010F)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010F data mismatch') '' )
    #this_rc := ER
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) 'Some or all of the real fields are not null' )
    Leave
    Endif
    
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    Mthroutine Name(mthSelectIncludeExclude)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK ('Compare All Fields excluding #BIFA010C #BIFA040A in: ' + #LF_Original_Count.AsString + ' record(s)') '' )
    
    Clr_List Named(#w_lDB)
    #XG_ALL := *NULL
    Select Fields(*ALL *EXCLUDING #BIFA010C #BIFA010D #BIFA040A #BIFA040B *INCLUDING #BIFA010D #BIFA040B) From_File(VTLI0033D) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    Add_Entry To_List(#w_lDB)
    Endselect
    
    If (#this_rc *EQ ER)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Selecting record ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    If (#LF_Original_Count *NE #LF_DB_Count)
    #Com_Owner.mthAdd_SubMsg( ER ('- Expected # rows ' + #LF_Original_Count.asString) ('Actual rows ' + #LF_DB_Count.AsString) )
    Return
    Endif
    
    #LF_i := 1
    Selectlist Named(#w_lOriginal)
    #LF_BIFP0300A := #BIFP0300A
    * #LF_BIFA256A := #BIFA256A
    #LF_BIFA010A := #BIFA010A
    #LF_BIFA010C := #BIFA010C
    #LF_BIFA010D := #BIFA010D
    #LF_BIFA010B := #BIFA010B
    #LF_BIFA010E := #BIFA010E
    #LF_BIFA010F := #BIFA010F
    #LF_BIFP0702A := #BIFP0702A
    #LF_BIFN0702A := #BIFN0702A
    #LF_BIFN0702B := #BIFN0702B
    #LF_BIFA040A := #BIFA040A
    #LF_BIFA040B := #BIFA040B
    
    Get_Entry Number(#LF_i) From_List(#w_lDB) Ret_Status(#this_rc)
    If (#this_rc <> OK)
    #Com_Owner.mthIssue_Runtime_Message( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Entry Number ' + #LF_i.AsString + ' may not exist in list LF_lDB') )
    Leave
    Endif
    
    * Compare all the fields in the 2 lists
    #LF_DataShown := False
    
    * Debug line - needs to be removed once the test is fully working
    * #Com_Owner.mthShowData( #this_rc )
    If_Null Field(#XG_ALLEXCLUDE)
    If (#LF_BIFP0300A <> #BIFP0300A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0300A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010A <> #BIFA010A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010D <> #BIFA010D)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010D data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFP0702A <> #BIFP0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFP0702A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFN0702A <> #BIFN0702A)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702A data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFN0702B <> #BIFN0702B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFN0702B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA040B <> #BIFA040B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA040B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010B <> #BIFA010B)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010B data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010E <> #BIFA010E)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010E data mismatch') '' )
    #this_rc := ER
    Endif
    If (#LF_BIFA010F <> #BIFA010F)
    #Com_Owner.mthShowData( #this_rc )
    #Com_Owner.mthAdd_SubMsg( ER ('- Field #BIFA010F data mismatch') '' )
    #this_rc := ER
    Endif
    Else
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) 'One or both of #BIFA010C , #BIFA040A are not null' )
    #Com_Owner.mthShowData( #this_rc )
    #this_rc := ER
    Leave
    Endif
    
    If (#this_rc <> OK)
    #Com_Owner.mthAdd_SubMsg( ER ('- Unexpected ' + #this_rc) ('Comparing record ' + #BIFP0300A.AsString + ', ' + #BIFA256A) )
    Leave
    Endif
    
    #LF_i += 1
    Endselect
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( OK ('- Successful') '' )
    Endif
    Endroutine
    
    *
    * mthShowData
    *
    Mthroutine Name(mthShowData)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (*Not #LF_DataShown)
    #LF_DataShown := True
    #Com_Owner.mthAdd_SubMsg( OK ('- data mismatch on Entry Number ' + #LF_i.AsString) ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Real Fields') ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFP0300A "' + #LF_BIFP0300A.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFP0300A "' + #BIFP0300A.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010A "' + #LF_BIFA010A + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010A "' + #BIFA010A + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010C "' + #LF_BIFA010C + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010C "' + #BIFA010C + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010D "' + #LF_BIFA010D + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010D "' + #BIFA010D + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFP0702A "' + #LF_BIFP0702A.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFP0702A "' + #BIFP0702A.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFN0702A "' + #LF_BIFN0702A.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFN0702A "' + #BIFN0702A.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Virtuals') ('') )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA040A "' + #LF_BIFA040A + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA040A "' + #BIFA040A + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA040B "' + #LF_BIFA040B + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA040B "' + #BIFA040B + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFN0702B "' + #LF_BIFN0702B.asString + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFN0702B "' + #BIFN0702B.asString + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010B "' + #LF_BIFA010B + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010B "' + #BIFA010B + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010E "' + #LF_BIFA010E + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010E "' + #BIFA010E + '"') '' )
    
    #Com_Owner.mthAdd_SubMsg( OK ('- Original #BIFA010F "' + #LF_BIFA010F + '"') '' )
    #Com_Owner.mthAdd_SubMsg( OK ('- DB       #BIFA010F "' + #BIFA010F + '"') '' )
    Endif
    
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSigned2String)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    Define_Map For(*INPUT) Class(#BIFN0702A) Name(#this_signed)
    Define_Map For(*RESULT) Class(#BIFA009A) Name(#this_string)
    
    Define Field(#LF_IntegerCount) Reffld(#BIFINT1A) Default(5)
    Define Field(#LF_DecimalCount) Reffld(#BIFINT1A) Default(2)
    Define Field(#LF_WorkString) Reffld(#BIFA256A)
    Define Field(#LF_IntegerPart) Reffld(#BIFA005A)
    Define Field(#LF_DecimalPart) Reffld(#BIFA002A)
    Define Field(#LF_DecimalPosn) Reffld(#BIFINT1A)
    #LF_WorkString := #BIFN0702A.AsString
    #LF_DecimalPosn := #LF_WorkString.PositionOf( '.' )
    If (#LF_DecimalPosn = 0)
    #LF_IntegerPart := #LF_WorkString.Substring( 1 #LF_IntegerCount ).RightAdjust( #LF_IntegerCount '0' )
    #LF_DecimalPart := *NULL
    #LF_DecimalPart := #LF_DecimalPart.RightTrim.LeftMost( #LF_DecimalCount '0' )
    Else
    #LF_IntegerPart := #LF_WorkString.Substring( 1 (#LF_DecimalPosn - 1) ).RightAdjust( #LF_IntegerCount '0' )
    #LF_DecimalPart := #LF_WorkString.Substring( (#LF_DecimalPosn + 1) #LF_DecimalCount ).RightTrim.LeftMost( #LF_DecimalCount '0' )
    Endif
    #this_string := #LF_IntegerPart + #LF_DecimalPart
    Endroutine
