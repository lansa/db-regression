Function:
  Enabled For RDMLX:  Yes

  Source: |
    Function Options(*DIRECT) Rcv_List(#wLKData #wLRet)
    
    * ******************************************************************************************************
    * Test Case Description
    *
    * Generic Select With_key character column types using Physical Keys
    *
    * This is a copy of V57033D with one LV query replaced by a physical query.
    *
    * Tests single and 2 key generic search of ALL 'string' field types. That is:
    * Varchar, String, Nchar, Nvarchar, Alpha, Char, Char SUNI.
    * Tables are a subset of VTL157033D.
    * A BLOB exists to force the table to use SQL on IBM i.
    * All tests are executed only from a Function but NOT a Reusable Part.
    * ******************************************************************************************************
    
    * Unique Key Data.
    Def_List Name(#wLKData) Fields(#VTF_KEY1 #VTF_KEY2 #VTF_KEY3) Type(*WORKING) Entrys(1)
    
    * Return messages.
    Def_List Name(#wLRet) Fields(#BIFMSGC #BIFMSG1 #BIFMSG2) Counter(#BIFMSGCNT) Type(*WORKING) Entrys(*MAX)
    
    * List Of Test data.
    Define Field(#LF_Test_Data) Reffld(#F1570331)
    Define Field(#LF_Test_Data_Count) Reffld(#Std_Count)
    Def_List Name(#wLTestData) Fields(#LF_Test_Data) Counter(#LF_Test_Data_Count) Type(*WORKING) Entrys(10)
    
    Define Field(#LF_rc) Reffld(#BIFA002A) Default(OK)
    Define Field(#LF_i) Reffld(#Std_Count)
    Define Field(#LF_Total_Errors) Reffld(#Std_Count)
    Define Field(#LF_Total_Warnings) Reffld(#Std_Count)
    Define Field(#LF_Execution_Type) Reffld(#Std_Alpha)
    Define Field(#LF_Test_String) Type(*STRING)
    
    Define Field(#LF_Test_Data_VARCHAR) Reffld(#F1570331)
    Define Field(#LF_Test_Data_CHAR) Reffld(#F157033H)
    Define Field(#LF_Test_Data_ALPHA) Reffld(#F157033A)
    Define Field(#LF_Operation_Name) Reffld(#BIFMSG1)
    
    * Search Generic(*YES) Wth_Key(<...> <...>) Nbr_Keys(*WithKeys / *Compute) counter.
    Define Field(#LF_Key1_And_Key2_WithKey_Counter) Reffld(#Std_Count)
    Define Field(#LF_Key1_And_Key2_Compute_Counter) Reffld(#Std_Count)
    Define Field(#LF_Key1_And_Blank_WithKey_Counter) Reffld(#Std_Count)
    Define Field(#LF_Key1_And_Blank_Compute_Counter) Reffld(#Std_Count)
    Define Field(#LF_Blank_And_Blank_WithKey_Counter) Reffld(#Std_Count)
    Define Field(#LF_Blank_And_Blank_Compute_Counter) Reffld(#Std_Count)
    
    * Counter for the current Function's I/O queries.
    Define Field(#LF_Func_L157033H1) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033H1_VARCHAR) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033I8) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033I8_NCHAR) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033D9) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033D9_NVARCHAR) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033DA) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033DA_ALPHA) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033DH) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033DH_CHAR) Reffld(#Std_Count)
    
    Define Field(#LF_Func_L157033DU) Reffld(#Std_Count)
    Define Field(#LF_Func_L157033DU_SUNI) Reffld(#Std_Count)
    
    Group_By Name(#LF_Func_Counters) Fields(#LF_Func_L157033H1 #LF_Func_L157033H1_VARCHAR #LF_Func_L157033I8 #LF_Func_L157033I8_NCHAR #LF_Func_L157033D9 #LF_Func_L157033D9_NVARCHAR #LF_Func_L157033DA #LF_Func_L157033DA_ALPHA #LF_Func_L157033DH #LF_Func_L157033DH_CHAR #LF_Func_L157033DU #LF_Func_L157033DU_SUNI #LF_Total_Errors)
    
    * Start testing.
    Clr_List Named(#wLRet)
    #Com_Owner.mthAdd_Msg( OK *Function ('Start - ' + *Function_Desc) )
    
    Get_Entry Number(1) From_List(#wLKData)
    
    * SETUP THE TEST DATA.
    #LF_Test_String := 'Visual'
    Execute Subroutine(AddTestData) With_Parms(#LF_Test_String)
    Execute Subroutine(AddTestData) With_Parms('Visualisation')
    Execute Subroutine(AddTestData) With_Parms('Visiblity')
    Execute Subroutine(AddTestData) With_Parms((#LF_Test_String + ' LANSA'))
    
    * DELETE / INSERT TEST DATA.
    #LF_Execution_Type := #VTF_KEY1
    #Com_Owner.mthDoDelete( #LF_rc )
    #Com_Owner.mthDoInsert( #LF_rc )
    
    * SEARCH TEST.
    If (#LF_rc = OK)
    * DEFAULT SEARCH CRITERIA.
    #Com_Owner.mthDoSearch( #LF_rc )
    Endif
    
    #Com_Owner.mthAdd_Msg( OK *Function 'End' )
    Use Builtin(CLR_MESSAGES)
    Return
    
    *
    * Add Test Data.
    *
    Subroutine Name(AddTestData) Parms((#LF_Test_Data *RECEIVED))
    If (#LF_Test_Data_Count < 10)
    Add_Entry To_List(#wLTestData)
    Endif
    Endroutine
    
    *
    * Delete Data.
    *
    Mthroutine Name(mthDoDelete)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #LF_i := 0
    Dowhile Cond(#this_rc = OK)
    Fetch Fields(#F1570331) From_File(VTL157033H) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #LF_i += 1
    Delete From_File(VTL157033H) With_Key(#F1570331) Io_Error(*NEXT) Val_Error(*NEXT)
    Endif
    Endwhile
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Delete Data' (#LF_i.AsString + ' set of key records deleted from VTL157033H') )
    
    #LF_i := 0
    Dowhile Cond(#this_rc = OK)
    Fetch Fields(#F1570338) From_File(VTL157033I) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc = OK)
    #LF_i += 1
    Delete From_File(VTL157033I) With_Key(#F1570338) Io_Error(*NEXT) Val_Error(*NEXT)
    Endif
    Endwhile
    
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Delete Data' (#LF_i.AsString + ' set of key records deleted from VTL157033I') )
    Endroutine
    
    *
    * Insert Data.
    *
    Mthroutine Name(mthDoInsert)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #F157033K1 := #VTF_KEY1 + #VTF_KEY2 + #VTF_KEY3
    #F157033K2 := 0
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#LF_Test_Data_Count)
    Get_Entry Number(#LF_i) From_List(#wLTestData)
    
    #F157033K2 += 1
    #F1570331 #F1570331_VARCHAR #F1570338 #F1570338_NCHAR #F1570339 #F1570339_NVARCHAR #F157033A #F157033A_ALPHA #F157033H #F157033H_CHAR #F157033U #F157033U_SUNI := #LF_Test_Data
    
    Insert Fields(*ALL) To_File(VTL157033H) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc *NE OK)
    #this_rc := ER
    Leave
    Endif
    End_Loop
    Endif
    
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Insert Data' (#F157033K2.AsString + ' / ' + #LF_Test_Data_Count.AsString + ' records inserted into VTL157033H') )
    
    #F157033K2 := 0
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#LF_Test_Data_Count)
    Get_Entry Number(#LF_i) From_List(#wLTestData)
    #F157033K2 += 1
    #F1570331 #F1570331_VARCHAR #F1570338 #F1570338_NCHAR #F1570339 #F1570339_NVARCHAR #F157033A #F157033A_ALPHA #F157033H #F157033H_CHAR #F157033U #F157033U_SUNI := #LF_Test_Data
    
    Insert Fields(*ALL) To_File(VTL157033I) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    If (#this_rc *NE OK)
    #this_rc := ER
    Leave
    Endif
    End_Loop
    Endif
    #Com_Owner.mthAdd_SubMsg( #this_rc 'Insert Data' (#F157033K2.AsString + ' / ' + #LF_Test_Data_Count.AsString + ' records inserted into VTL157033I') )
    
    Endroutine
    *
    * Search.
    *
    Mthroutine Name(mthDoSearch)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Begin_Loop Using(#LF_i) To(#LF_Test_Data_Count)
    Get_Entry Number(#LF_i) From_List(#wLTestData)
    
    #Com_Owner.mthAdd_SubMsg( #this_rc ('<' + #LF_i.AsString + '> Seach Test: ' + *Quote + #LF_Test_Data + *Quote) 'Compare Search Generic(*YES) Nbr_Keys(*Compute) results from Function' )
    
    #Com_Owner.mthSearch_By_Varchar( #LF_Test_Data #this_rc )
    #Com_Owner.mthSearch_By_Char( #LF_Test_Data #this_rc )
    #Com_Owner.mthSearch_By_Alpha( #LF_Test_Data #this_rc )
    
    If (#this_rc *NE OK)
    Leave
    Endif
    End_Loop
    Endif
    
    If (#this_rc = OK)
    #Com_Owner.mthAdd_SubMsg( #this_rc ('Seach Generic using 2 keys') ('Key data: ' + *Quote + #LF_Test_String + *Quote) )
    
    #Com_Owner.mthSearch_Generic_By_2_Varchar_Keys( #LF_Test_String #LF_Test_String #this_rc )
    #Com_Owner.mthSearch_Generic_By_2_NChar_Keys( #LF_Test_String #LF_Test_String #this_rc )
    #Com_Owner.mthSearch_Generic_By_2_NVarchar_Keys( #LF_Test_String #LF_Test_String #this_rc )
    #Com_Owner.mthSearch_Generic_By_2_Alpha_Keys( #LF_Test_String #LF_Test_String #this_rc )
    Endif
    Endroutine
    
    *
    * Search By Varchar.
    *
    Mthroutine Name(mthSearch_By_Varchar)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_test_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    * PERFORM GENERIC SEARCH ON HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual".
    #LF_Test_Data_VARCHAR := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2) )
    #Com_Owner.mthSearch_Generic_Varchar( #LF_Test_Data_VARCHAR #this_rc )
    
    * PERFORM GENERIC SEARCH ON ONE BYTE MORE THAN THE HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual ".
    If (#this_rc = OK)
    #LF_Test_Data_VARCHAR := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2 + 1) )
    #Com_Owner.mthSearch_Generic_Varchar( #LF_Test_Data_VARCHAR #this_rc )
    Endif
    
    * PERFORM SEARCH ON THE FULL STRING.
    If (#this_rc = OK)
    #Com_Owner.mthSearch_Varchar( #this_test_data #this_rc )
    Endif
    Endif
    Endroutine
    
    *
    * Search With_Key(<VARCHAR>) Generic(*Yes) Nbr_Keys(*Compute).
    *
    Mthroutine Name(mthSearch_Generic_Varchar)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search Generic VARCHAR(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Generic_Compute_By_Varchar( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name True #this_rc )
    Endif
    Endroutine
    
    *
    * Search With_Key(<VARCHAR>).
    *
    Mthroutine Name(mthSearch_Varchar)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search VARCHAR(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Varchar( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name False #this_rc )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Generic_Compute_By_Varchar)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc ' - Querying L157033DA' '' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Varchar)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    * Search By char.
    *
    Mthroutine Name(mthSearch_By_Char)
    Define_Map For(*INPUT) Class(#F157033H) Name(#this_test_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    * PERFORM GENERIC SEARCH ON HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual".
    #LF_Test_Data_CHAR := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2) )
    #Com_Owner.mthSearch_Generic_Char( #LF_Test_Data_CHAR #this_rc )
    
    * PERFORM GENERIC SEARCH ON ONE BYTE MORE THAN THE HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual ".
    If (#this_rc = OK)
    #LF_Test_Data_CHAR := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2 + 1) )
    #Com_Owner.mthSearch_Generic_Char( #LF_Test_Data_CHAR #this_rc )
    Endif
    
    * PERFORM SEARCH ON THE FULL STRING.
    If (#this_rc = OK)
    #Com_Owner.mthSearch_Char( #this_test_data #this_rc )
    Endif
    Endif
    Endroutine
    
    *
    * Search With_Key(<CHAR>) Generic(*Yes) Nbr_Keys(*Compute).
    *
    Mthroutine Name(mthSearch_Generic_Char)
    Define_Map For(*INPUT) Class(#F157033h) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search Generic CHAR(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Generic_Compute_By_Char( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name True #this_rc )
    Endif
    Endroutine
    
    *
    * Search With_Key(<CHAR>).
    *
    Mthroutine Name(mthSearch_Char)
    Define_Map For(*INPUT) Class(#F157033h) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search CHAR(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Char( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name False #this_rc )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Generic_Compute_By_Char)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F157033H) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Char)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F157033H) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    * Search By Alpha.
    *
    Mthroutine Name(mthSearch_By_Alpha)
    Define_Map For(*INPUT) Class(#F157033A) Name(#this_test_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    * PERFORM GENERIC SEARCH ON HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual".
    #LF_Test_Data_ALPHA := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2) )
    #Com_Owner.mthSearch_Generic_Alpha( #LF_Test_Data_ALPHA #this_rc )
    
    * PERFORM GENERIC SEARCH ON ONE BYTE MORE THAN THE HALF SIZE OF THE STRING.
    * EG: STRING = "Visual LANSA", SEARCH VALUE = "Visual ".
    If (#this_rc = OK)
    #LF_Test_Data_ALPHA := #this_test_data.Substring( 1 (#this_test_data.CurChars / 2 + 1) )
    #Com_Owner.mthSearch_Generic_Alpha( #LF_Test_Data_ALPHA #this_rc )
    Endif
    
    * PERFORM SEARCH ON THE FULL STRING.
    If (#this_rc = OK)
    #Com_Owner.mthSearch_Alpha( #this_test_data #this_rc )
    Endif
    Endif
    Endroutine
    
    *
    * Search With_Key(<ALPHA>) Generic(*Yes) Nbr_Keys(*Compute).
    *
    Mthroutine Name(mthSearch_Generic_Alpha)
    Define_Map For(*INPUT) Class(#F157033a) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search Generic ALPHA(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Generic_Compute_By_Alpha( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name True #this_rc )
    Endif
    Endroutine
    
    *
    * Search With_Key(<ALPHA>).
    *
    Mthroutine Name(mthSearch_Alpha)
    Define_Map For(*INPUT) Class(#F157033a) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Operation_Name := ' - Search ALPHA(40): ' + *Quote + #this_test_value + *Quote
    
    #Com_Owner.mthFunc_Search_Alpha( #LF_Operation_Name #this_test_value #this_rc )
    #Com_Owner.mthValidate_Results( #LF_Operation_Name False #this_rc )
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Generic_Compute_By_Alpha)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F157033A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthFunc_Search_Alpha)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#F157033A) Name(#this_test_value)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    Change Field(#LF_Func_Counters) To(*NULL)
    
    * VARCHAR.
    Select Fields(#F1570331) From_File(VTL157033H) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033H' )
    Else
    Select Fields(#F1570331_VARCHAR) From_File(L157033H1_VARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033H1_VARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033H1_VARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NCHAR.
    Select Fields(#F1570338) From_File(VTL157033I) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Physical table VTL157033I' )
    Else
    Select Fields(#F1570338_NCHAR) From_File(L157033I8_NCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033I8_NCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033I8_NCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * NVARCHAR.
    Select Fields(#F1570339) From_File(L157033D9) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9 += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9' )
    Else
    Select Fields(#F1570339_NVARCHAR) From_File(L157033D9_NVARCHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033D9_NVARCHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033D9_NVARCHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * ALPHA.
    Select Fields(#F157033A) From_File(L157033DA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA' )
    Else
    Select Fields(#F157033A_ALPHA) From_File(L157033DA_ALPHA) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DA_ALPHA += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DA_ALPHA' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR.
    Select Fields(#F157033H) From_File(L157033DH) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH' )
    Else
    Select Fields(#F157033H_CHAR) From_File(L157033DH_CHAR) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DH_CHAR += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DH_CHAR' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * CHAR + SUNI.
    Select Fields(#F157033U) From_File(L157033DU) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU' )
    Else
    Select Fields(#F157033U_SUNI) From_File(L157033DU_SUNI) With_Key(#this_test_value) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Func_L157033DU_SUNI += 1
    Endselect
    
    If ((#this_rc = ER) *Or (#this_rc = VE))
    #LF_Total_Errors += 1
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation 'On Logical View L157033DU_SUNI' )
    Else
    #this_rc := OK
    Endif
    Endif
    
    * REPORT ON THE FINDING.
    If (#LF_Total_Errors > 0)
    #this_rc := ER
    Endif
    Endif
    Endroutine
    
    *
    * Validate the Selection Results.
    *
    Mthroutine Name(mthValidate_Results)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_operation)
    Define_Map For(*INPUT) Class(#BIFB001A) Name(#this_expect_different)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    If (#this_rc = OK)
    #LF_Total_Warnings := 0
    
    * Alpha / Char: Trailing blanks are not significant, and they will be trimmed off under Generic( *Yes ).
    
    If ((#LF_Func_L157033H1 = #LF_Func_L157033H1_VARCHAR) *And (#LF_Func_L157033I8 = #LF_Func_L157033I8_NCHAR) *And (#LF_Func_L157033DA = #LF_Func_L157033DA_ALPHA) *And (#LF_Func_L157033DH = #LF_Func_L157033DH_CHAR) *And (#LF_Func_L157033DU = #LF_Func_L157033DU_SUNI) *And (#LF_Func_L157033D9 = #LF_Func_L157033D9_NVARCHAR))
    
    * Numbers of search result using Object Name and Object Id must be the same.
    #this_rc := OK
    
    * Alpha / Char records must be identical.
    If (#LF_Func_L157033DA <> #LF_Func_L157033DH)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('(Alpha/Char/NChar) records mismatched: (' + #LF_Func_L157033DA.AsString + ', ' + #LF_Func_L157033DH.AsString + ')') )
    Else
    * Varchar / NVarchar records must be identical.
    If (#LF_Func_L157033H1 <> #LF_Func_L157033D9)
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('(Varchar/NVarchar) records mismatched: (' + #LF_Func_L157033H1.AsString + ', ' + ', ' + #LF_Func_L157033D9.AsString + ')') )
    Endif
    Endif
    
    If (#this_rc <> ER)
    * - Alpha / Char are identical.
    * - Varchar / NVarchar are identical.
    * If (#this_expect_different = False) then Alpha / Varchar must be identical.
    If ((#this_expect_different = False) *And ((#LF_Func_L157033Da <> #LF_Func_L157033H1)))
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Unexpected differences: (Char/Varhar/NChar/NVarchar/Alpha) (' + #LF_Func_L157033DH.AsString + ', ' + #LF_Func_L157033H1.AsString + ', ' + #LF_Func_L157033I8.AsString + ', ' + #LF_Func_L157033D9.AsString + ', ' + #LF_Func_L157033DA.AsString + ')') )
    Else
    If (#LF_Func_L157033DH <> #LF_Func_L157033I8)
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('*** WARNING (Char/NChar) records not matched: (' + #LF_Func_L157033DH.AsString + ', ' + #LF_Func_L157033I8.AsString + ')') )
    Else
    * Produce a simple text if all records are matched.
    If ((#LF_Func_L157033H1 = #LF_Func_L157033I8) *And (#LF_Func_L157033I8 = #LF_Func_L157033D9) *And (#LF_Func_L157033D9 = #LF_Func_L157033DA) *And (#LF_Func_L157033DA = #LF_Func_L157033DH))
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Completed: ' + #LF_Func_L157033Dh.AsString + ' records') )
    Else
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Completed: Found (Char/Varchar/NChar/NVarchar/Alpha) (' + #LF_Func_L157033Dh.AsString + ', ' + #LF_Func_L157033H1.AsString + ', ' + #LF_Func_L157033I8.AsString + ', ' + #LF_Func_L157033D9.AsString + ', ' + #LF_Func_L157033DA.AsString + ')') )
    Endif
    Endif
    Endif
    Endif
    Endif
    Else
    * Function's record counters are not matched.
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( #this_rc #this_operation ('Function (ID / LN) records mismatched. (Char/Varchar/NChar/NVarchar/Alpha/SUNI) ' + #LF_Func_L157033Dh.AsString + '/' + #LF_Func_L157033Dh_CHAR.AsString + ', ' + #LF_Func_L157033H1.AsString + '/' + #LF_Func_L157033H1_VARCHAR.AsString + ', ' + #LF_Func_L157033I8.AsString + '/' + #LF_Func_L157033I8_NCHAR.AsString + ', ' + #LF_Func_L157033D9.AsString + '/' + #LF_Func_L157033D9_NVARCHAR.AsString + ', ' + #LF_Func_L157033DA.AsString + '/' + #LF_Func_L157033DA_ALPHA.AsString + ', ' + ', ' + #LF_Func_L157033DU.AsString + '/' + #LF_Func_L157033DU_SUNI.AsString + ')') )
    Endif
    Endroutine
    
    *
    * Component Query Operations.
    *
    Mthroutine Name(mthSearch_Generic_By_2_Varchar_Keys)
    Define_Map For(*INPUT) Class(#F1570331) Name(#this_short_field_name_data)
    Define_Map For(*INPUT) Class(#F1570331_VARCHAR) Name(#this_long_field_name_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK (' + With_Key(*Varchar *Varchar)') ('') )
    
    * With_Key(<Field Id> <Long Name>).
    If (#this_rc = OK)
    #F1570331 := #this_short_field_name_data
    #F1570331_VARCHAR := #this_long_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033H) With_Key(#F1570331 #F1570331_VARCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033H) With_Key(#F1570331 #F1570331_VARCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> <L-Name>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570331 := #this_short_field_name_data
    #F1570331_VARCHAR := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033H) With_Key(#F1570331 #F1570331_VARCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033H) With_Key(#F1570331 #F1570331_VARCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(<Long Name> <Field Id>).
    If (#this_rc = OK)
    #F1570331_VARCHAR := #this_long_field_name_data
    #F1570331 := #this_short_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> <Id>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570331_VARCHAR := #this_long_field_name_data
    #F1570331 := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(*Blank *Blank).
    If (#this_rc = OK)
    #F1570331_VARCHAR := *Blank
    #F1570331 := *Blank
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Blank_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter = 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Blank_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033H1_VARCHAR) With_Key(#F1570331_VARCHAR #F1570331) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Blank_And_Blank_Compute_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter < #LF_Blank_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(*Blank *Blank) Successfully') ('As expected: WithKey(' + #LF_Blank_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Blank_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank) Nbr_Keys(*Compute)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank)') ('Unexpected return records') )
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSearch_Generic_By_2_Nchar_Keys)
    Define_Map For(*INPUT) Class(#F1570338) Name(#this_short_field_name_data)
    Define_Map For(*INPUT) Class(#F1570338_NCHAR) Name(#this_long_field_name_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK (' + With_Key(*Nchar *Nchar)') ('') )
    
    * With_Key(<Field Id> <Long Name>).
    If (#this_rc = OK)
    #F1570338 := #this_short_field_name_data
    #F1570338_NCHAR := #this_long_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033I) With_Key(#F1570338 #F1570338_NCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033I) With_Key(#F1570338 #F1570338_NCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> <L-Name>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570338 := #this_short_field_name_data
    #F1570338_NCHAR := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033I) With_Key(#F1570338 #F1570338_NCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(VTL157033I) With_Key(#F1570338 #F1570338_NCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(<Long Name> <Field Id>).
    If (#this_rc = OK)
    #F1570338_NCHAR := #this_long_field_name_data
    #F1570338 := #this_short_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> <Id>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570338_NCHAR := #this_long_field_name_data
    #F1570338 := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(*Blank *Blank).
    If (#this_rc = OK)
    #F1570338_NCHAR := *Blank
    #F1570338 := *Blank
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Blank_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter = 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Blank_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033I8_NCHAR) With_Key(#F1570338_NCHAR #F1570338) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Blank_And_Blank_Compute_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter < #LF_Blank_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(*Blank *Blank) Successfully') ('As expected: WithKey(' + #LF_Blank_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Blank_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank) Nbr_Keys(*Compute)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank)') ('Unexpected return records') )
    Endif
    Endif
    Endroutine
    
    
    *
    *
    *
    Mthroutine Name(mthSearch_Generic_By_2_NVarchar_Keys)
    Define_Map For(*INPUT) Class(#F1570339) Name(#this_short_field_name_data)
    Define_Map For(*INPUT) Class(#F1570339_NVARCHAR) Name(#this_long_field_name_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK (' + With_Key(*NVarchar *NVarchar)') ('') )
    
    * With_Key(<Field Id> <Long Name>).
    If (#this_rc = OK)
    #F1570339 := #this_short_field_name_data
    #F1570339_NVARCHAR := #this_long_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9) With_Key(#F1570339 #F1570339_NVARCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9) With_Key(#F1570339 #F1570339_NVARCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> <L-Name>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570339 := #this_short_field_name_data
    #F1570339_NVARCHAR := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9) With_Key(#F1570339 #F1570339_NVARCHAR) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9) With_Key(#F1570339 #F1570339_NVARCHAR) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(<Long Name> <Field Id>).
    If (#this_rc = OK)
    #F1570339_NVARCHAR := #this_long_field_name_data
    #F1570339 := #this_short_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> <Id>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F1570339_NVARCHAR := #this_long_field_name_data
    #F1570339 := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(*Blank *Blank).
    If (#this_rc = OK)
    #F1570339_NVARCHAR := *Blank
    #F1570339 := *Blank
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Blank_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter = 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Blank_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033D9_NVARCHAR) With_Key(#F1570339_NVARCHAR #F1570339) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Blank_And_Blank_Compute_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter < #LF_Blank_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(*Blank *Blank) Successfully') ('As expected: WithKey(' + #LF_Blank_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Blank_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank) Nbr_Keys(*Compute)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank)') ('Unexpected return records') )
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    Mthroutine Name(mthSearch_Generic_By_2_Alpha_Keys)
    Define_Map For(*INPUT) Class(#F157033A) Name(#this_short_field_name_data)
    Define_Map For(*INPUT) Class(#F157033A_ALPHA) Name(#this_long_field_name_data)
    Define_Map For(*BOTH) Class(#BIFA002A) Name(#this_rc)
    
    #Com_Owner.mthAdd_SubMsg( OK (' + With_Key(*Alpha *Alpha)') ('') )
    
    * With_Key(<Field Id> <Long Name>).
    If (#this_rc = OK)
    #F157033A := #this_short_field_name_data
    #F157033A_ALPHA := #this_long_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA) With_Key(#F157033A #F157033A_ALPHA) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA) With_Key(#F157033A #F157033A_ALPHA) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> <L-Name>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F157033A := #this_short_field_name_data
    #F157033A_ALPHA := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA) With_Key(#F157033A #F157033A_ALPHA) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA) With_Key(#F157033A #F157033A_ALPHA) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<Id> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<Id> <L-Name>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(<Long Name> <Field Id>).
    If (#this_rc = OK)
    #F157033A_ALPHA := #this_long_field_name_data
    #F157033A := #this_short_field_name_data
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Key1_And_Key2_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Key2_WithKey_Counter > 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Key2_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_Compute_Counter += 1
    Endselect
    
    * The counters must be identical.
    If (#LF_Key1_And_Key2_WithKey_Counter = #LF_Key1_And_Key2_Compute_Counter)
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> <Id>) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + ') = Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    
    #F157033A_ALPHA := #this_long_field_name_data
    #F157033A := *Blank
    
    * Select With_Key(<...> *Blank) Generic(*Yes).
    #LF_Key1_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_WithKey_Counter += 1
    Endselect
    
    If (#LF_Key1_And_Blank_WithKey_Counter > 0)
    * Select With_Key(<...> *Blank) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Key1_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Blank_Compute_Counter += 1
    Endselect
    
    * The result of search from <Where(key1 = 'xyz' and key2 like '%')> must be less than <Where(key1 like 'xyz%')>.
    If (#LF_Key1_And_Blank_WithKey_Counter < #LF_Key1_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(<L-Name> *Blank) Successfully') ('As expected: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected results: WithKey(' + #LF_Key1_And_Blank_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Blank_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> *Blank)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected different results. WithKey(' + #LF_Key1_And_Key2_WithKey_Counter.AsString + '), Compute(' + #LF_Key1_And_Key2_Compute_Counter.AsString + ')') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(<L-Name> <Id>)') ('Unexpected no return records') )
    Endif
    Endif
    
    * With_Key(*Blank *Blank).
    If (#this_rc = OK)
    #F157033A_ALPHA := *Blank
    #F157033A := *Blank
    
    * Select With_Key(<...> <...>) Generic(*Yes).
    #LF_Blank_And_Blank_WithKey_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Key1_And_Key2_WithKey_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter = 0)
    * Select With_Key(<...> <...>) Generic(*Yes) Nbr_Keys(*Compute).
    #LF_Blank_And_Blank_Compute_Counter := 0
    Select Fields(#F157033K1) From_File(L157033DA_ALPHA) With_Key(#F157033A_ALPHA #F157033A) Nbr_Keys(*COMPUTE) Generic(*YES) Io_Status(#this_rc) Io_Error(*NEXT) Val_Error(*NEXT)
    #LF_Blank_And_Blank_Compute_Counter += 1
    Endselect
    
    If (#LF_Blank_And_Blank_WithKey_Counter < #LF_Blank_And_Blank_Compute_Counter)
    #this_rc := OK
    #Com_Owner.mthAdd_SubMsg( OK ('  - With_Key(*Blank *Blank) Successfully') ('As expected: WithKey(' + #LF_Blank_And_Blank_WithKey_Counter.AsString + ') < Compute(' + #LF_Blank_And_Blank_Compute_Counter.AsString + ')') )
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank) Nbr_Keys(*Compute)') ('Unexpected no return records') )
    Endif
    Else
    #this_rc := ER
    #Com_Owner.mthAdd_SubMsg( ER ('  - With_Key(*Blank *Blank)') ('Unexpected return records') )
    Endif
    Endif
    Endroutine
    
    *
    *
    *
    * Add a message to the Return Message List.
    Mthroutine Name(mthAdd_Msg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    * Add a sub message to the Return Message List.
    Mthroutine Name(mthAdd_SubMsg)
    Define_Map For(*INPUT) Class(#BIFMSGC) Name(#this_msg_code)
    Define_Map For(*INPUT) Class(#BIFMSG1) Name(#this_msg1)
    Define_Map For(*INPUT) Class(#BIFMSG2) Name(#this_msg2)
    
    #BIFMSGC := #this_msg_code
    #BIFMSG1 := ' ' + #this_msg1
    #BIFMSG2 := #this_msg2
    Add_Entry To_List(#wLRet)
    Endroutine
    
    
